// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/activity)
	PaginateActivity(ctx echo.Context, params PaginateActivityParams) error

	// (GET /api/apps)
	PaginateApps(ctx echo.Context, params PaginateAppsParams) error

	// (POST /api/apps)
	CreateApp(ctx echo.Context, params CreateAppParams) error

	// (DELETE /api/apps/{appID})
	DeleteApp(ctx echo.Context, appID string) error

	// (GET /api/apps/{appID})
	GetApp(ctx echo.Context, appID string) error

	// (PUT /api/apps/{appID})
	UpdateApp(ctx echo.Context, appID string) error

	// (GET /api/apps/{appID}/channels)
	PaginateChannels(ctx echo.Context, appID string, params PaginateChannelsParams) error

	// (POST /api/apps/{appID}/channels)
	CreateChannel(ctx echo.Context, appID string) error

	// (DELETE /api/apps/{appID}/channels/{channelID})
	DeleteChannel(ctx echo.Context, appID string, channelID string) error

	// (GET /api/apps/{appID}/channels/{channelID})
	GetChannel(ctx echo.Context, appID string, channelID string) error

	// (PUT /api/apps/{appID}/channels/{channelID})
	UpdateChannel(ctx echo.Context, appID string, channelID string) error

	// (GET /api/apps/{appID}/groups)
	PaginateGroups(ctx echo.Context, appID string, params PaginateGroupsParams) error

	// (POST /api/apps/{appID}/groups)
	CreateGroup(ctx echo.Context, appID string) error

	// (DELETE /api/apps/{appID}/groups/{groupID})
	DeleteGroup(ctx echo.Context, appID string, groupID string) error

	// (GET /api/apps/{appID}/groups/{groupID})
	GetGroup(ctx echo.Context, appID string, groupID string) error

	// (PUT /api/apps/{appID}/groups/{groupID})
	UpdateGroup(ctx echo.Context, appID string, groupID string) error

	// (GET /api/apps/{appID}/groups/{groupID}/instances)
	GetGroupInstances(ctx echo.Context, appID string, groupID string, params GetGroupInstancesParams) error

	// (GET /api/apps/{appID}/groups/{groupID}/instances/{instanceID})
	GetInstance(ctx echo.Context, appID string, groupID string, instanceID string) error

	// (GET /api/apps/{appID}/groups/{groupID}/instances/{instanceID}/status_history)
	GetInstanceStatusHistory(ctx echo.Context, appID string, groupID string, instanceID string, params GetInstanceStatusHistoryParams) error

	// (GET /api/apps/{appID}/groups/{groupID}/instances_stats)
	GetGroupInstanceStats(ctx echo.Context, appID string, groupID string, params GetGroupInstanceStatsParams) error

	// (GET /api/apps/{appID}/groups/{groupID}/instancescount)
	GetGroupInstancesCount(ctx echo.Context, appID string, groupID string, params GetGroupInstancesCountParams) error

	// (GET /api/apps/{appID}/groups/{groupID}/status_timeline)
	GetGroupStatusTimeline(ctx echo.Context, appID string, groupID string, params GetGroupStatusTimelineParams) error

	// (GET /api/apps/{appID}/groups/{groupID}/version_breakdown)
	GetGroupVersionBreakdown(ctx echo.Context, appID string, groupID string) error

	// (GET /api/apps/{appID}/groups/{groupID}/version_timeline)
	GetGroupVersionTimeline(ctx echo.Context, appID string, groupID string, params GetGroupVersionTimelineParams) error

	// (GET /api/apps/{appID}/packages)
	PaginatePackages(ctx echo.Context, appID string, params PaginatePackagesParams) error

	// (POST /api/apps/{appID}/packages)
	CreatePackage(ctx echo.Context, appID string) error

	// (DELETE /api/apps/{appID}/packages/{packageID})
	DeletePackage(ctx echo.Context, appID string, packageID string) error

	// (GET /api/apps/{appID}/packages/{packageID})
	GetPackage(ctx echo.Context, appID string, packageID string) error

	// (PUT /api/apps/{appID}/packages/{packageID})
	UpdatePackage(ctx echo.Context, appID string, packageID string) error

	// (GET /config)
	GetConfig(ctx echo.Context) error

	// (PUT /instances/{instanceID})
	UpdateInstance(ctx echo.Context, instanceID string) error

	// (GET /login)
	Login(ctx echo.Context) error

	// (GET /login/cb)
	LoginCb(ctx echo.Context) error

	// (POST /login/token)
	LoginToken(ctx echo.Context) error

	// (GET /login/validate_token)
	ValidateToken(ctx echo.Context) error

	// (POST /v1/update/)
	Omaha(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PaginateActivity converts echo context to params.
func (w *ServerInterfaceWrapper) PaginateActivity(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginateActivityParams
	// ------------- Optional query parameter "appID" -------------

	err = runtime.BindQueryParameter("form", true, false, "appID", ctx.QueryParams(), &params.AppID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Optional query parameter "groupID" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupID", ctx.QueryParams(), &params.GroupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	// ------------- Optional query parameter "channelID" -------------

	err = runtime.BindQueryParameter("form", true, false, "channelID", ctx.QueryParams(), &params.ChannelID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginateActivity(ctx, params)
	return err
}

// PaginateApps converts echo context to params.
func (w *ServerInterfaceWrapper) PaginateApps(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginateAppsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginateApps(ctx, params)
	return err
}

// CreateApp converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApp(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAppParams
	// ------------- Optional query parameter "clone_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "clone_from", ctx.QueryParams(), &params.CloneFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clone_from: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateApp(ctx, params)
	return err
}

// DeleteApp converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApp(ctx, appID)
	return err
}

// GetApp converts echo context to params.
func (w *ServerInterfaceWrapper) GetApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApp(ctx, appID)
	return err
}

// UpdateApp converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApp(ctx, appID)
	return err
}

// PaginateChannels converts echo context to params.
func (w *ServerInterfaceWrapper) PaginateChannels(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginateChannelsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginateChannels(ctx, appID, params)
	return err
}

// CreateChannel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateChannel(ctx, appID)
	return err
}

// DeleteChannel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "channelID" -------------
	var channelID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "channelID", runtime.ParamLocationPath, ctx.Param("channelID"), &channelID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteChannel(ctx, appID, channelID)
	return err
}

// GetChannel converts echo context to params.
func (w *ServerInterfaceWrapper) GetChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "channelID" -------------
	var channelID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "channelID", runtime.ParamLocationPath, ctx.Param("channelID"), &channelID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetChannel(ctx, appID, channelID)
	return err
}

// UpdateChannel converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "channelID" -------------
	var channelID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "channelID", runtime.ParamLocationPath, ctx.Param("channelID"), &channelID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateChannel(ctx, appID, channelID)
	return err
}

// PaginateGroups converts echo context to params.
func (w *ServerInterfaceWrapper) PaginateGroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginateGroupsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginateGroups(ctx, appID, params)
	return err
}

// CreateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGroup(ctx, appID)
	return err
}

// DeleteGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroup(ctx, appID, groupID)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroup(ctx, appID, groupID)
	return err
}

// UpdateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateGroup(ctx, appID, groupID)
	return err
}

// GetGroupInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupInstancesParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// ------------- Optional query parameter "sortFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortFilter", ctx.QueryParams(), &params.SortFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortFilter: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "searchFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchFilter", ctx.QueryParams(), &params.SearchFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchFilter: %s", err))
	}

	// ------------- Optional query parameter "searchValue" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchValue", ctx.QueryParams(), &params.SearchValue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchValue: %s", err))
	}

	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupInstances(ctx, appID, groupID, params)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, appID, groupID, instanceID)
	return err
}

// GetInstanceStatusHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatusHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusHistoryParams
	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatusHistory(ctx, appID, groupID, instanceID, params)
	return err
}

// GetGroupInstanceStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupInstanceStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupInstanceStatsParams
	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupInstanceStats(ctx, appID, groupID, params)
	return err
}

// GetGroupInstancesCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupInstancesCount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupInstancesCountParams
	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupInstancesCount(ctx, appID, groupID, params)
	return err
}

// GetGroupStatusTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupStatusTimeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupStatusTimelineParams
	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupStatusTimeline(ctx, appID, groupID, params)
	return err
}

// GetGroupVersionBreakdown converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupVersionBreakdown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupVersionBreakdown(ctx, appID, groupID)
	return err
}

// GetGroupVersionTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupVersionTimeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupVersionTimelineParams
	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupVersionTimeline(ctx, appID, groupID, params)
	return err
}

// PaginatePackages converts echo context to params.
func (w *ServerInterfaceWrapper) PaginatePackages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginatePackagesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginatePackages(ctx, appID, params)
	return err
}

// CreatePackage converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePackage(ctx, appID)
	return err
}

// DeletePackage converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "packageID" -------------
	var packageID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "packageID", runtime.ParamLocationPath, ctx.Param("packageID"), &packageID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter packageID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePackage(ctx, appID, packageID)
	return err
}

// GetPackage converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "packageID" -------------
	var packageID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "packageID", runtime.ParamLocationPath, ctx.Param("packageID"), &packageID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter packageID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackage(ctx, appID, packageID)
	return err
}

// UpdatePackage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appID" -------------
	var appID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appID", runtime.ParamLocationPath, ctx.Param("appID"), &appID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appID: %s", err))
	}

	// ------------- Path parameter "packageID" -------------
	var packageID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "packageID", runtime.ParamLocationPath, ctx.Param("packageID"), &packageID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter packageID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePackage(ctx, appID, packageID)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// UpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInstance(ctx, instanceID)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// LoginCb converts echo context to params.
func (w *ServerInterfaceWrapper) LoginCb(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginCb(ctx)
	return err
}

// LoginToken converts echo context to params.
func (w *ServerInterfaceWrapper) LoginToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginToken(ctx)
	return err
}

// ValidateToken converts echo context to params.
func (w *ServerInterfaceWrapper) ValidateToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ValidateToken(ctx)
	return err
}

// Omaha converts echo context to params.
func (w *ServerInterfaceWrapper) Omaha(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Omaha(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/activity", wrapper.PaginateActivity)
	router.GET(baseURL+"/api/apps", wrapper.PaginateApps)
	router.POST(baseURL+"/api/apps", wrapper.CreateApp)
	router.DELETE(baseURL+"/api/apps/:appID", wrapper.DeleteApp)
	router.GET(baseURL+"/api/apps/:appID", wrapper.GetApp)
	router.PUT(baseURL+"/api/apps/:appID", wrapper.UpdateApp)
	router.GET(baseURL+"/api/apps/:appID/channels", wrapper.PaginateChannels)
	router.POST(baseURL+"/api/apps/:appID/channels", wrapper.CreateChannel)
	router.DELETE(baseURL+"/api/apps/:appID/channels/:channelID", wrapper.DeleteChannel)
	router.GET(baseURL+"/api/apps/:appID/channels/:channelID", wrapper.GetChannel)
	router.PUT(baseURL+"/api/apps/:appID/channels/:channelID", wrapper.UpdateChannel)
	router.GET(baseURL+"/api/apps/:appID/groups", wrapper.PaginateGroups)
	router.POST(baseURL+"/api/apps/:appID/groups", wrapper.CreateGroup)
	router.DELETE(baseURL+"/api/apps/:appID/groups/:groupID", wrapper.DeleteGroup)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID", wrapper.GetGroup)
	router.PUT(baseURL+"/api/apps/:appID/groups/:groupID", wrapper.UpdateGroup)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID/instances", wrapper.GetGroupInstances)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID/instances/:instanceID", wrapper.GetInstance)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID/instances/:instanceID/status_history", wrapper.GetInstanceStatusHistory)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID/instances_stats", wrapper.GetGroupInstanceStats)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID/instancescount", wrapper.GetGroupInstancesCount)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID/status_timeline", wrapper.GetGroupStatusTimeline)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID/version_breakdown", wrapper.GetGroupVersionBreakdown)
	router.GET(baseURL+"/api/apps/:appID/groups/:groupID/version_timeline", wrapper.GetGroupVersionTimeline)
	router.GET(baseURL+"/api/apps/:appID/packages", wrapper.PaginatePackages)
	router.POST(baseURL+"/api/apps/:appID/packages", wrapper.CreatePackage)
	router.DELETE(baseURL+"/api/apps/:appID/packages/:packageID", wrapper.DeletePackage)
	router.GET(baseURL+"/api/apps/:appID/packages/:packageID", wrapper.GetPackage)
	router.PUT(baseURL+"/api/apps/:appID/packages/:packageID", wrapper.UpdatePackage)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.PUT(baseURL+"/instances/:instanceID", wrapper.UpdateInstance)
	router.GET(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/login/cb", wrapper.LoginCb)
	router.POST(baseURL+"/login/token", wrapper.LoginToken)
	router.GET(baseURL+"/login/validate_token", wrapper.ValidateToken)
	router.POST(baseURL+"/v1/update/", wrapper.Omaha)

}
