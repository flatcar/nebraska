// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
