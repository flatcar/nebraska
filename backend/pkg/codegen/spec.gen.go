// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//9APITEj6EAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
