// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdW3PctpL+KyzuPo40so+dBz2tLMey9jjHqshOtsqlYmFIzAwiEmAAUBer5r9vERcC",
	"JAGSc6NGjh9SkYdAo9H9daMbaJBPYUyynGCIOQtPn0IWL2EGxJ8g5ugO8cfy75ySHFKOoHyS55fvyz/4",
	"Yw7D05BxivAinIQPRwTk6CgmCVxAfAQfOAVHHCxEr78YweFp2TlCSbhaTco/UxQDjgj+D8jgFhQ1mQiX",
	"dEra8RJgDNNt6CoSFs0UMGZRQ5jDBaRh+YhCwGHyRTyeE5oBHp6GCeDwiKMMhpP1OEhm5fiSZsRZOKl4",
	"Mr+VHC0oKbbQheiutSH+sY28JLVKWihpEyp/xowDHMPNudYUNOMM3kGqgNrWzB2kDJX9WrysJiGFfxeI",
	"wiQ8/VbyO1HQNoK1NasBYI1oyLfRbEu0jseaEG4qaJDZXzDmJc/a9K7AAjrMTz5V/0IcZuKP/6ZwHp6G",
	"/zU1Fj1V5jytbHlVjQYoBeLfMSkwd8uOEw7Sc9/zhvysxproxObVOdE8Pyd4jhbtWSaQxRTl3K27SYid",
	"SF1NSjJJEfNI4g8XaQpmKQxPOS3gpAcDgqiHUa3cNqtKt8PVoTo4tbFbR+J2G32yFcAdPh3R3DWZHhfA",
	"HKIcCDbZzqWpPlxcJpv6HQtYK6fzwNK4benW/YeS68QgxhaGzaIHg8zjEQw61/AJFqRHdws2w8650njp",
	"WWmV7XQJYavopIoldJSiWOmUZdlGCC0l1Im+UezaY2/aJDLw8AniBV+Gp29PJg4LAfGtwlfXZHUz02Nz",
	"eSsCvTYlBVu3prrCbWaU0lrAGhR1ad9ssOZbohpgcYneg+OSkQU5Ur8WCPNu9PidmpFfb4DTYFcxZ2Tr",
	"XfyUGNy+Z6eL3z59TsWoc4o+FccxZOw3gMECZhDzrzTd2LUIUlFW0YoKKmEGCr78jSSbJ0AFX0ZZSaCk",
	"toQggfSaP6YbE5QkIiZolDRTskB4i7mL/tV8U7IgW1AiFZGCb8cTKYwSMJxRwG7BH758YRhVTSbSiUFJ",
	"myO+uTJk55Z3dCHTlkp7Rkrwmp06UiwdW4B0mYpg8gNKG+lH3W6WgC2dDqt88PrtL+64MHHbvtf7MfQd",
	"uv1ei+uaqxkmePFjNBczLWnOU8BjQM9iXxZASQY/X28JIEmGsBqARsoKQJIi7BZ1gliZRl2Bx5SA5B2I",
	"b8l8brWcEZJCgAeOrKhFuSQXzRS9kg14B2tO3oMP62f2HqYcbMwMYlEiCJSjZ5CDBHBwjRYY8ILC3xnY",
	"VJWaVsQ0sYiy5jDf4Q7If4fKh8GEnSUZwhsLQ5CIgKAhNleWwG2urmBNqm7SMoWKTI1FozkfvDzqaIjP",
	"Qq5tKetGf0oAysojIM28ZfhXJkiu278HnV0C3BF/Mv8eLSGyMrCBcZ76c3Mu9Fas5uAQNkl6kq12qE5S",
	"FD/+Bh6+5iWn7ArSK0gREWQyhFFWZOGpycvsXGFAIiWoRxl4iApJP8ohLf8rR1hV43+ez1EMP5KCso19",
	"hBqLCFLRUtAyI8hJXWIO6R3YODpTY0j+I6SpmWGuwRw2guaNZsHAHJrgWf74BWXwO8FwS+a5JmMoS92X",
	"9EnBtyQv9SxGKYk1B2G/4tKlJtsKSMMJKnLC85M0JQW/xFeULChkm2NJUYoQjnJNS7hGCuLbgctO775b",
	"m9327oHxUR4xtoDnMqkWgjxW0eUO3FjRInGF5GIB8O1SWL7TGdjV3Zy1R/TauUk0eDOp0yE543yXX2nj",
	"yjRsOge/17WsvIsg99q9adOwut6WxnCcI1c4rwn+l0EHFX1C9gqqPWHf9Lxou1Tb1tcccOc+fpankEO3",
	"ohNyj8s4Dybdz8uZOxtASms7ZdYjsZ+epj7SBH8kadKxx+R+VOAEzhH2UZVSu6AAc2eTYb5QyX6hyKyc",
	"21qhzUxzZC2ZiVGALZGa5OtiriTj1bhn+8+/ZberU6Ttt/4UJ96plSAumOhVuttGEmyF52bPNgP5t9JI",
	"jssON+W/EObi/9JibwqE+S9vqiFUKvSOQnBbyn2wWO4aHX/FnDrPce1htpxKawr6kMqRZKQIMPfWd/3I",
	"tGuOmvxZ/UjqOc9MUD4w+EB5d9ZpSe+s6xB5b9naGELcZR3K7gtEUsD4+RLGtx8IVdHWToVR0o/icoBo",
	"Tqheiauhv9ou+ssehq6vG1onZugtdyTtMexNSSa8ZteCuIP8QI3bTA/utpuSmUbTpA342imCKQoyVT92",
	"mqEE4gacGwsuNTmkt+FeVu2I3zKtajEdtpa3TyvLVWFwRYYe1R1A1IpBBq2I1WLkixWGhgm16osuzj1B",
	"buNw1zrsNztk7WcdZ5wog4yDLHd2lD88hRAXmQ3VqCl502Vw7Zt4aviulbXJQ2LD2zpCK9hHxDihaAP1",
	"2v2dAY+7YRvVYyyAIuw+3+QMVxQdiO5RLHcV9PGT+a3P295BitgQPVceSveoOzAzC5dixQHhJZ6Ttoxz",
	"wNg9oe5QqmCQenZFG+xVLSeGopeTL+QWOuIorn/uQbxo5iJOMrAEv8O/C8h4O3Sul8kcYAWSqnJ4l4L4",
	"NkVyCpXdeZzKWseieoRoVg1xMHvy9bPpLnlZLVeTcI5S6N24b537dtGtN1YH3uucH3jOtI3/dwRb1L3U",
	"rFf6rNYA4/kLUQtQiaa5wcrk2ZuYX6NMuoXBdizlLtAy1rX7mivLOCzoDreOlwe/K1Oo50Xhc8DNW4jW",
	"Vk8TdBYaFfAUDBV6JWY1Jx34Wns3S/UbHsdYZZK739GquHFNUacPOtj3WJJn56apLNHMNYx7Z6o7wHfI",
	"FdIYYq7UYRYOUsxSa9XARTZb80KH8WRVxlAbrj0ncZkkLijij9elFiXPC8SXxeyckFsEzwq+lJMqFyfx",
	"kz6AOlUNDc8gR/+GQuEEJfE7CCikmsBM/OuDnu7//vmlxLIYtMyRxVNDacl5rukMYKRs1mZDZoAyfIsJ",
	"5iAW8IMZQKko+ktT8j+3CN+R9PYYEUPu3/I3ZV6Sm9Pp1Gra9I3hf1TtWYBYAHAgERnI2kd6XNWgmYaW",
	"1Z6GJ8cnx6/EfHOIQY7C0/BfxyfHJwL4fCm0MgU5mtp31BaQt+6NhDlYIFwOXbUURKlciJLwNLxSLc5M",
	"gxxQkEEOKQtPvykR/11A+mhEIu4JEXqlCvbfa+UBJyzdNMx2wtpd7cPKtTvX9jjW7m2sau2u1rWpVl/L",
	"+3k6c0BLz2csXF7oMZQq31FFmAP5gjjZD+G8dDM2pY4yDz8RSP10XrkI3ZSTYTnBTDqw1ycn2uZVaZ21",
	"Ak//UpmjoT7kJplYP1etmDz8hBivjC1ghahSDTQ7pU2/OXnTtlNtfQEmPJiTAie1Pm/lDLqGErmr1cny",
	"5cKKmy74200p8KZDlb+2Pf63m9VNSVJ6nVweazk9zgLy4CwXt3w8jkY+HOBkfkT46DtMDuhcSMl5QOMA",
	"wDtQokQk6gMQlufMia49AGUS5oQ5sCGTpADkeQsd5+LRmXgyABpxSjCM5pRknY74Rro1yPg7kjzuUosq",
	"qnSoUdX0BnNCg9qE6w52tV+UWfveLQ6lrHeDNadnsgYY2S1Nn5qRyUqyp4sx6ozK352AfC8e+QFZBmKd",
	"8ZB/PXWitA2FOquSH6/S3vb0GUEPE/+C4BLwBeTPKd0xDO1CTn2NMCDP14kA9IoxinLzwqFcldi49CsP",
	"9cZT8TO6+ZoUDsbNSwXs0c1/raZ9AG5+al/E7M6FdcuAzMvk3AVeHayem4vqe8bwPyeFsq/TepxmpaHB",
	"nlMpal3vWQ00jgvtiorN4bMrMj6vnr5MX1q/Sj4sbDYSGc+nmuvvvrBZtdhv6KwHOSC/On2qdt2GxNR6",
	"BrPHQJxxuKLr0UA9cZK0dxH3E613YeXtgH7PG7V3q/AC8h9Jf/v2HtZqM9aq9vx5QTeCZPz4ckH0c5X0",
	"Zx07WyV3ZRcNvg5gYTX3Q7rTFdluQLJyoV+v9TNV2RHOzcUfB9LLJVKKfLhDV+3XwK01yvPnKEIeAcId",
	"W/iC1xebptg3SYe534Wa73jOV10U8yYoQgP7TU/kEAfjQ6dPqpZgSGIiMbxAdxAHiLNAdQ0ATgL9+lNX",
	"sjISsN1RiqmV2E+i0oUZnxtbx4vVhnnerGZ9/V9A/qMof78O6EKvVXtEkhnj2bOb9ZGkrz+9RDA962Jr",
	"S/wwFluVT6y52NZ6rZXyrG0otaEOcKme1gpjve66aiUSoC2896X9ouGXYnn+YkB5j6mXUn/C9TxZm29i",
	"hPIPKOWi+Hd9sRDKP9Nkw84Q0Hi5xeCi/x8gLeAm3ZNCYnYX8BhSo7rPAKF249UTJ1zW7drvR71RgJPC",
	"QTu66ZOpPV4N8npbOL1Lq+j/pbm7OqVawfZhhMDmDrYb3ZX+BgfCWl3rxsLVSC8H+VO5fEVLc2W53xDq",
	"fY67EF+/EP1Phb9nbUhRhvjwBX8MI2relO+1KdE+UFAY0cQaAx+0xUVMv7RhmG3tLL6WL4t4+TH2RgHZ",
	"3rdd6lJ2WEoF8mut1MWed2R8Ix60eVQ3XfutQzTdWfZ5Xt1g/Wkee1lNpIB7sg5bqVukHm0yhwh6FTpx",
	"6314XtSrJU633Rb2cmmv3sT3E/b7WRVcL3B0WIBsFnyxlLvvxcE75CEaito3iWb2Wyq9pqJaB1XrbY2l",
	"9Y7Mn+dNBuIt4TjwrdoE72yN7BvhHYMeMsYHrQYa4rtaDpSsfq4H4xhL74KgsTvmiuAf8wDMxX7LTXdV",
	"nm45oC7vShP9h1XmdR+UPPMZhf0eJE9xn9bbcGOoehzGRXv9CiZ3pd5V9fRl1urV35Q2rFrPSGS8EoLq",
	"RVjeij2lieFlBI1+sw1K+BRXh+R0p0/VJ0yHFPLpGZhApOreW8w3GvbdAYj9qdb9FPR1Q8rvujYo6hsR",
	"SR1lfZuh4QLyHwkK+/ZXF2ZV3Cuy7HGevcxvM2TJ8quXC65nXq/rsj+U9VrV1I1hAl/r4BtxmfaXq3RZ",
	"ifWOSZchrFWNsk3Bx+5x63yd6DD4WkIZD79dtSlf63wNP/VodhwJj+a75F3vFgpUM9cVZf1kf3chvYAQ",
	"d6jF0w5BdUx+CUEq33LqnLx8HECc5ASJM8X67D/K7kOCRkXKx6VkR+v+KIOcophVcnJy1yqcYH0lOz/S",
	"WwEfjnCyeTEM875ZslGysX75ChvLcltoySnJIF/CgnViJgUcsiHQ+SQaNgHUoyMOH/g0TwFqaKa5lDgj",
	"Xydr6x0cu0mMpBLx2Qiv8MXTYEbJPYM0mKfkviX1T4LAICsV1CIKE0RhzCP5XvLN85t/nbz2cdy7WWLt",
	"jnh1Iz4NiUEaMEjvIJUaka1ftVuXYRzK8hRmEHMoV3xMcFBqJAAFXwYZSdQXsFpuVHA9jWc9iohBms5A",
	"fOtWwvlskF9XpGbDd5Yawnrjmn6ByzkSir7DZF2J+iVSfbjEvaUppyIadYBTfhRlaBz4cHR/f380JzQ7",
	"KmgKcUzUJzmHuWzzQZieaNDifdRI0PpOjINDW6K9zmt0A7kDKZKfYtW4cBqLblZJtw6KP9Rjg4s+k6kT",
	"7AmJJKv3cLYk5LYPu/dwFoh2TuT+qYi4vesSAnmtRbnX/zv6WMyOrtECA15QuNFWQZvmhVg7jn69g5jv",
	"fmeykkI5zx7B3r1SaZdfqOI7Rf7o93P5uNMTiFjgIUuH21Pt00g9Nt9ib5DZ1+mJOQS/D7nBr7gK0Lw6",
	"CWDoOwwQCzghQQrowiXq1er/AwAA//9i001eApcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
