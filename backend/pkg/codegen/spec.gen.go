// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
