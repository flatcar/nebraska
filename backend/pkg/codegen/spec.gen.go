// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
