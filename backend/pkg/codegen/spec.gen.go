// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
