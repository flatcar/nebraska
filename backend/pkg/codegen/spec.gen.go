// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
