// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zn7/3wAAAP//cY11sBaDAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
