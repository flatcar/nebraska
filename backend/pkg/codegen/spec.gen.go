// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
