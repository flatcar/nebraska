// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BwAA//9s9jtCwaAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
