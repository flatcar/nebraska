// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
