// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
