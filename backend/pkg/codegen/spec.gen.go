// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
