// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdW3Pbtpf/KhzuPqQzsuWkSR/8tImTOP5v2njipN2Z1MOBSEhCTQIsCDp2MvruO7iR",
	"AAlQ0NVym4dOHRE4AM75nRtwCH6PU1KUBEPMqvj0e1ylc1gA8SdIGbpF7J7/XVJSQsoQlE/K8uI1/4Pd",
	"lzA+jStGEZ7Fo/juiIASHaUkgzOIj+Ado+CIgZno9VdFcHzKOycoixeLEf8zRylgiODfQAE3oKjJJJjT",
	"4bTTOcAY5pvQVSQMmjmoKoMawgzOII35IwoBg9kn8XhKaAFYfBpngMEjhgoYj1abQTbh40uaCaviUTOn",
	"9jc+oxkl9QayEN21NMQ/NuGXpNZwC2V9QvxnXDGAU7j+rDUFPfEK3kKqgNqXzC2kFeL9enNZjGIK/64R",
	"hVl8+oXPd6Sg3TLWlKwGgDFiS76PZpOjNh4tJlw30CCTv2DK+Jy16l2CGXSon3yq/oUYLMQf/03hND6N",
	"/2vcavRYqfO40eVFMxqgFIh/p6TGzM07RhjIz3zPO/wzGmuiI3OuzoWW5RnBUzTrrzKDVUpRydyyG8XY",
	"idTFiJPJ6pQlEn+4znMwyWF8ymgNR0swIIh6JqqF25+qkm24OFQHpzS2a0jcZmMZbwVww5cjmrsWs8QE",
	"VA5WBoJNtnNJahkuLrJ17Y4BrIXTeGCp3CZ3bfuh+DpqEWMyw5yiB4OVxyK06FzBJhiQ3rtZMCfsXCtN",
	"5x5Pq3RniAkbRSdNLKGjFDWVQV7yNoJpOaFO9O1Frz36plWiAHfvIZ6xeXz64mTk0BCQ3ih8DS1WN2t7",
	"rM9vRWCpTknG2tpkC9ycjBJaD1hBUZe2zS3WfC6qAxYX6z045hOZkSP1a40wG0aP36i1/Fsa4HSmqybX",
	"8tbr/BQb3LZnq85vlzanmahziT4Rpymsql8BBjNYQMw+03xt0yJIJUVDK6mphBmo2fxXkq2fANVsnhSc",
	"AKc2hyCD9Ird52sTlCSSStDgNHMyQ3iDtYv+zXpzMiMbUCKCCIYTCqob8Lsvvg+jp8kkOpDntAnK0pd1",
	"hiBO1+Yhp5EATURTPcsRxBvEIIJqKoho/8R/uqiqGtINBCToIkGlERP/7T2ZkZptSjgXVCzCVykpYbUR",
	"1UqS4BQZYuujXXbuuR+X6vdhp9Csp2Crn6E4hpa77A+klNCPsCoJruDSZMj6Z/yuLgA+ohBkPNGJBKnI",
	"DkJ7fiMjaZ9w/B7hm4iRKCNpzZcsfEX0hIjnIP/JRUkM1yf1RsyC8z1CGcQMTZHwe8MuShKzQ2gnu7gc",
	"36K8kwLbTJuDau50mvzBsxe/uHOTzO1/vB64Qt+g2/f2Zm25uzBsih+TqVgppznNAUsBfZn6MlFKCvjh",
	"akOjKMmQyjKKe8pMQZYj7GZ1hiqO8EtwnxOQvQLpDZlOjZYTQnIIcODIilpSSnLJRNHj04C30Ao0PPgw",
	"fq5ew5yBtSeDqiQTBPjoBWQgAwxcoRkGrKbwYwXWFaWmlVSaWEKr7jDf4BbIf4PKL8OsepkVCK/NDEEi",
	"AYKG2OCbA7e6uhIGKbpRTxUaMtYUW8n54OURR4d9BnJNTVk1A1EMUFqeAKnmPcW/bBM1W/896Bxi4Jbm",
	"J/eA9paUG7sAgbmG+nP9WejjAD2DQ9ioW5Lw99NFkqP0/ldw97nkM60uIb2EFBFBpkAYFXURn7Z7A2a+",
	"GpDMC+pJAe6SWtJPSkj5f3yERTP+h+kUpfAdqWm1to1QYxFBKpkLWu0IclEXmEF6C9aOXdUYcv4J0tTa",
	"Ya7AFHYSt7VWUYEpbBM4+eMnVMBvBMMNJ880mZaylD2nT2q2IXkpZzEKJ9YdpHqDuUnNNmWQhhNU5ITl",
	"J3lOanaBLymZUVitjyVFKUE4KTUtYRopSG8C3c7Svd/+dPs7WK2N8rCxBzyXSvUQ5NGKIXPgxopmiSsk",
	"Fw7At1Nm2E5nYGebOWOf8plzozJ4Q3PQIDnjfJdd6eOqbdg1Dn6ra2j5EEHm1fu2TUfrlrZsFcc5coNz",
	"i/G/BB2WLWOyl1H9BfuW50XbhTo6uWKAOc+SijKHDLoFnZGvmMd5MBt+zlfubNAkvv1H4kwnz32kCX5H",
	"8mxgn9P9qMYZnCLsoyq5dk4BZs4mYbZQ8X6myCycW6uxOZnuyKMmi28EYHLE4rzN5oYzXol7tqD928bb",
	"OsncfPtZzcS7NA7iuhK9uLntJMFGeN6eGxSg/MKV5Jh3uOb/QpiJ/0uNva4RZr88b4ZQqdArCsEN53sw",
	"W247Hd9gRp21BOYwGy6ltwR9UOpIMnIEKvfxi31sP7RGTf6lfSz6kOd2qAwMPlA5nHUa3Hs5VMiws2xt",
	"H0zcZi3U9ouUclCxszlMb94SqqKtrTKD009SPkAyJVR74mboz6aJ/rSDoW2/oWXSDr3hjqQ5hrkpWQmr",
	"OeQQt5AfqHG76cHtZktql9FV6RZ8/RShLUxrK8/MNEMxxA04NxZcYnJwb829LKvMxFCtxpmG+fL+iTn3",
	"CsFVQXpUdwBhFSQFecTGGflihdAwwaoAGpq5jA/eoYoRitaYqdnf6bvdDfsC2octFxHk2TpH4qKGQ3RP",
	"Upkg65OU9rdlhuMWUlSFlIw2yqZ72LrYrsIlWFKAOfgI/65hxfrhkV2Oc4CVTqqa4lUO0pscySU0gOyF",
	"MmscfekRkkkzxMHsu9rnj0P8MlouRvEU5dC7Ods72xuiazcWvQmhHyGoXEfE8vfo6/w+YnNURQpaEaqi",
	"AtAbmEWgikAkaEStY7H2V05GS4ppQ88OCKEJlRNdqNPY1Y7a3nIS/UVe4IwDGlYRmvaW2VlcNCU0YnMY",
	"pTWlELMoJZjBO9bCZ+XzO0F/RAquBCW7l1bGfTisB3FGLdS9ibRaHbtoYsYItahBaPDX3ams5CGWkEWn",
	"5r2n6P2gxF1t15qw7RfQGRbIsA/hJujx6fhlW3Xp1ZiHgJu3qrAvni7oDDQq4CkYKvRKzOqZDOBr5W0h",
	"1S88ijJqXre/NdTMxrVEHYfrqNmjSZ4tkK6wRDPXMO4tnuFI2cFXSFOImRJH651JPckN14zrYrLi2zmt",
	"JWtCb2u4/prEm0FpTRG7v+JSlHOeITavJ2eE3CD4smZzuSgeAYif9EnOqWrYzhmU6H+hEDhBWfoKAgqp",
	"JjAR/3qrl/ufPz5xLItBuScRT1tKc8ZKTSdgIrxZfxoylZoSCXTMQCrgBwuAcrGfhjADCENa/Y8yI0c5",
	"wvXdMaGzlvZb+Sg6I6p19J43Uronp3o61oZI9O1azvg3VREnvCyOJF4jWeZKj5vKuLahodOn8cnxyfFT",
	"wY0SYlCi+DT++fjk+ESoBZsLmY1Bicbm64gzyPruvwQzhPnQTUtBlEo3lcWn8aVq8bJtUAIKCsggreLT",
	"L0oAf9eQ3rc8Eq+EEXqp3s14rUULnKB102iz9pW7mmeCK3e2thJW7t3q3MpdjTfken0N2+jpzADldrHV",
	"fxlutpQay9KEnoHzgjjbDeGSGyGT0kA1hZ8IpH46T12ErvliZNWoUJVnJyfaIqgKNsM/j/9SyUFLPeSl",
	"QeFdF720KH6PKtYoW1TVol420tPhOv385HlfT7X2RZiwaEpqnFl9XsgVDA0lK1zbToalF1rcNdBfrjnD",
	"u+ZW/tr3B1+uF9ecpLQ6pTw9clqcGWTRy1K80OUxNPJhgJH5J8JHv67mgM655JwHNA4AvAIcJWKvJABh",
	"ZVk50bUDoIziklQObMgUKgJl2UPHmXj0UjwJgEaaEwyTKSXFoCG+lmYNVuwVye63KUUVczrEqEpnRTJt",
	"Ldg2sIvdoszYXu7NUPJ6O1hzWiZjgD2bpfH3bmSykNPTNQ/2ROXvTkC+Fo/8gOSB2GA85PenTpT2oWBP",
	"Vc7HK7QXS/rsQQ4jv0NwMfgcsofk7j4U7VwufYUwoCxXiQC0x9iLcMvaIVyV2LjkK8/O9ifiBzTzFhcO",
	"xsxLAezQzH9uln0AZn5svnM7nAvrlhGZ8uTcBV4drJ61dxLsGMP/nhTKfHPaYzQbCQVbTiWoVa1nM9B+",
	"TOhQVKxfy3BHxmfN08dpS+1bA8LC5pYj+7Op7U0HvrBZtdht6KwHOSC7Ov7e7LqFxNR6BZP7SJyAuKLr",
	"vYF65CRp7iLuJlofwsqLgH4PG7UPi/Acsn+S/HZtPQxvsy+v9vB5wTCCZPz4eEH0w0v6s46teclt6UVn",
	"XgfgWNvXMIbTFdkuIFk51zep/UhVtoTz9v0aB9K5i5QsDzfoqv0KuDVGefgcRfAjQnhgC1/M9dGmKeYL",
	"m2Hmd6bWuz/jq97H8iYoQgK7TU/kEAdjQ8ffVS1BSGIiMTxDtxBHiFWR6hoBnEX6pltXsrInYLujlLZW",
	"YjeJyhBmfGZsFStmDfOwWc3q8j+H7J8i/N0aoHPtq3aIpHaMB89uVkeSfsvoMYLpQZ2tyfHDcLYqn1jR",
	"2Vq9Vkp5VlYUa6gDdNVjq2zWa66bViIB2sB6X5h3Sj8WzfMXA8p3rJZSWp5wPUzW5lsYoewtypkoDV6d",
	"LYSyDzRbszMENJ1vMLjo/zvIa7hO96yWmN0GPEJqVHcZIFgvlnrihAtbr/121BsFOCkctKEbf29rjxdB",
	"Vm8Do3dhvBLw2MydTckq2D6MELh91dmN7kZ+wYGwFteqsXAz0uNB/li6r2Tevk69XBHsPsdDiLdf1v63",
	"wt/jG3JUIBbu8PehRN23+JfqlGgfKSjsUcU6Ax+0xiWVvgAsTLe2Fl/Li8cef4y9VkC2820Xm8sOTWlA",
	"fqWFOtvxjoxvxINWj+Y92OXaIZpuLfs8a95v/aEeO/EmksFLsg5TqBukHn0yhwh6FTox49o5L+qVi9Nt",
	"N4W9dO3NhXc/YL8br+C6J9GhAbJZ9MkQ7q6dg3fIQ1QUtW+STMzLIL2qom9NaVpvqiy9qyh/nDe1EO8x",
	"x4Fv1SZ6ZUpk1wgfGPSQMR7kDTTEt+UOFK9++IP9KMtSh6Cxu0+P4B/zANTFvANnuCpPtwyoy7vURP9l",
	"lXnDByUPfEZh3pLkKe7TcgtXhqbHYbxory9oclfqXTZPH2etnn2PWli1XsuR/ZUQNNdkeSv2lCTCywg6",
	"/SZrlPDpawAPyOiOvzdfqw0p5NMraAORpvvSYr69Yd8dgJhf5d1NQd8wpPyma42ivj0iaaCsbz00nEP2",
	"T4LCru3VeesVd4osc5wHL/NbD1my/OrxguuB/bXN+0Px16qmbh8q8NkG34G66bG44Pdo6d0L4hKYPG/f",
	"t/86hxRGYPDS5QFrLW473v/lDIdgugO+NO9sssJnIa3rqE+/L7nievlnfYe+Yt/vPOx2hOSjs5UviOip",
	"4MB5JoMUgzyqIL2FVKreTjXO9Yq91KyAjQh5hbe1HeG9S6JzrclbOUSI+qz3mmzofsQmexBbL1npaI+8",
	"Cz0pu/f3Isx+fhaPHBf+iu+yrNB+6xcvJ422LR29c6Nw2W5VWQs3F2UPch2gv5edm3ckZqvVzlw7fffo",
	"EAfUMzRlpbAgt603B5VSWx7q+NX1o+hlKusedHVvmapcnS3XcHsu/QCFuWBXNUdlgGl3DvlwCYbaijFu",
	"ELOtub28JyiDRUm4EYsanPzUA81Vcy/Ho0PMejmHba+7sYvN8Q/iD5BHsoHQPx53Ijyzv45hfPrjCTye",
	"HY+iP+MrhYpoiu7+jPkvZxQxlIJcye/PmIsD3oGiFJd7mx3EUGe/vzl6dvLs+dHTZz8/X/lbIs5YaRGi",
	"am/9qFKftWhBmGkdnNZ5fu/dgrzAtyBH7b7jE0DTOWIwZTWFUYGqArB0Poq+UoJnkSHBUQRZevzT0rsd",
	"jAkvV+yrroPYp3/w1/cPbSsYV/a7dg5WKt/fpEJ++4m+8+sMYfm+wZT9JfxDxfyf7XmFhyzdjnvCY9p8",
	"C2PoMtZINXPd6aSf7O7yGC8gxKVT4qmXUXKVcwhy+XUI5yrl4wjirCRIVFvay3wnu4dYTkVqeDo5mSE8",
	"TifeCZ0j9q6eRB+4sKIU5PkEpDfRE/VzQTIYEZzf9535e075bBI01Q71khKOVIc9//nkmSs0yhCFKYsY",
	"iQhFPGDP83tt3mEWff74PuQOCdnmqUMhMKjZnFD0Da6ce/PWT7cGQEH0YyvR/tc7CIsQ9+EFxHzp3EB9",
	"uHh9FvEVCHEN4UD4RfGtbnID/SVkuln0nz8+RUBaFdEjeiLGGkDF76rrJzFACDaaweQIdnTtEBZS3p07",
	"0ruSm2HZ8yBEodQmSBhf4WROiPiQu/uoXBFT7YJ18g9F1+2d5xDIt1CVf/6/o3f15OgKzTDg4dFaUXaf",
	"5rlwA0dvbiFm20/PBP8avtj+7hHo4u1TFYf4RS8+Nun3Eh/443goRGLwjo3vijx8udb3LZeERL3pBUVE",
	"HZ8gaHwMuQNIzSpC0yamr9A3sTPPCIlyQGcuVi8W/x8AAP///MUARC+hAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
