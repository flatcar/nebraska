// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/icAAP//n+hxIRiPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
