// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/drop_all_tables.sql (781B)
// db/sample_data.sql (16.109kB)
// db/migrations/0001_initial.sql (7.125kB)
// db/migrations/0002_event_data.sql (729B)
// db/migrations/0003_longer_team_names.sql (142B)
// db/migrations/0004_rename_coreos_action.sql (139B)
// db/migrations/0005_default_team_id.sql (333B)
// db/migrations/0006_initial_application.sql (5.112kB)
// db/migrations/0007_add_package_arch.sql (1.558kB)
// db/migrations/0008-arm-channels-groups.sql (3.854kB)
// db/migrations/0009_group_track_names.sql (973B)
// db/migrations/0010_add_instance_alias.sql (138B)
// db/migrations/0011_add_composite_indexes.sql (760B)
// db/migrations/0012_drop_unused_indexes.sql (696B)
// db/migrations/0013_add_stats_indexes.sql (426B)
// db/migrations/0014_add_application_product_id.sql (316B)

package api

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x42\x5b\x27\x9f\x20\x5b\xd1\xb1\x77\x10\x9e\x69\xc6\x21\xa2\x50\x82\x48\xa7\xf5\xed\x8b\xfc\xb4\x43\xd0\x80\x9e\xf5\xf1\x23\xc5\xc7\xa9\xd7\x96\x1c\x63\xe1\x24\x87\xc4\xdf\x62\x6e\xc9\x19\xe7\x44\x30\xc2\xc4\xfb\xdd\xbf\xc8\x62\xdc\x2d\x60\xd0\x5a\x11\x82\x4b\xd5\x80\x6c\xa0\x13\x66\x0e\xa8\x43\x81\x13\x7a\x06\x6d\x50\xd2\x11\xaa\x5c\x02\x6a\xee\x75\x69\xd1\x3f\x44\xcd\xa1\x14\x8d\xf7\x8b\x65\x73\xf8\xb2\x55\x9a\xb7\x6f\xe9\xa9\x41\x3e\x8a\x79\xed\x6b\x50\xc5\x17\x56\xcf\xbe\xb6\x68\xfe\x1b\x18\x45\x4a\x2e\x17\xf1\xa8\xe7\x23\xcf\xfc\x08\x21\x8f\x05\x74\x2a\x62\x91\x7e\x82\x63\x84\x71\x3e\xcb\xdc\x6f\x2b\xb1\xfd\x6e\x18\xd2\x27\xcf\xa0\xf5\x8e\xdb\x95\xff\xe2\xb7\xce\xe9\xea\x68\xa2\xf3\xdf\x83\x26\x24\xad\x3a\xdc\xcb\x79\x4a\x1f\xef\x2f\xae\xa3\x76\xae\xf6\x7c\x49\x3f\x01\x00\x00\xff\xff\xe6\x1e\x65\x85\x0d\x03\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 781, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0xcf, 0xbe, 0xfb, 0xd5, 0xe3, 0xea, 0xab, 0xec, 0x78, 0x43, 0x41, 0x2, 0x31, 0xfc, 0x52, 0x9a, 0x8b, 0x30, 0x84, 0xc8, 0xab, 0x83, 0x9c, 0x5b, 0x64, 0xf8, 0xbe, 0xbc, 0xfd, 0x0, 0x97}}
	return a, nil
}

var _dbSample_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5d\x73\xd3\xb8\xd7\xbf\xe7\x53\x68\xe6\x7f\x11\x18\xaa\x54\xef\x2f\xdd\xd9\x0b\x5a\x28\xb0\x5b\x58\xba\x85\x65\xd8\x9b\x8e\x5e\x8e\x1b\x53\xc7\x0e\xb6\x93\xd0\x7e\xfa\x67\xec\xa4\xa9\x4b\xe9\x53\x27\xa5\x4b\x77\xc3\x90\x3a\xb2\x8f\x74\x7e\x3f\x1d\x1d\x9d\x23\xc9\x18\xa3\xd7\x79\x5a\xa7\x2e\x43\xd1\xd5\xee\xd1\x23\x8c\xd1\xf3\xb2\x98\xb4\xbf\x90\x8b\x11\x22\x4a\x73\x34\x4e\x4f\x4a\x57\xa7\x45\x8e\xca\x62\x5a\xa7\x39\x54\xed\x93\xab\xfb\x84\x10\x75\x9c\x2e\x2a\x3a\x76\x93\x49\x96\x86\xf6\xf1\x61\xf5\x25\x7b\x14\x21\x83\x1a\x50\x52\x16\x63\x74\x52\x16\xd3\x49\xf5\xcb\x95\xb2\x30\x72\x79\x0e\xd9\xd5\xc2\x89\x0b\xa7\xee\x04\xae\x16\x76\x6a\xfe\xe5\x9a\x02\xf2\x38\x42\xe2\xa6\x59\x7d\x5c\x83\x1b\x1f\xa7\xf1\x5a\xe3\x4d\xf9\x42\xee\xf9\xe2\xc9\xb6\x04\xb9\x3c\xa2\x69\x05\x25\x7a\xec\xe2\x38\xcd\xb7\xdb\xef\x27\x8f\xd2\xbc\x82\xb2\x46\x69\x5e\x17\x8b\xe7\x1e\xa7\x71\x0b\xe5\x6e\x0c\x4f\xd0\xcc\x65\x53\xa8\xd0\xe3\x41\x34\x96\x0b\x16\x03\xb6\x8c\x0a\x2c\x04\x8d\xd8\x09\x97\x60\x1f\xa3\xe1\xda\x71\xcf\xb8\x1d\x6c\xa1\xc1\x52\xb5\xc1\x93\x5f\xae\xd4\xdb\x34\x5b\xa1\xc7\xcd\x9f\xa6\xe2\x2d\x54\x41\x28\xa1\xde\x42\x4b\x08\x9d\x96\x5a\xad\x9a\xaa\x8c\xe7\x94\x59\x16\x85\xd6\x46\x1a\x16\x08\xc8\xc4\x59\xe5\x00\xa4\xa4\x3c\xa1\x6d\x73\x7d\xd4\x7a\xb2\xe0\x62\xaf\x28\xe1\x8f\xa3\x2e\xb7\x57\x54\xec\x94\x5f\x32\xb0\x85\x22\x54\xa1\x4c\x27\x4d\xf1\xf7\xb4\x05\xab\x98\xa1\x4e\xe1\x48\x5d\x82\x85\x8f\x80\xad\x23\x0e\x5b\xed\xb5\x02\xa9\x62\x90\xba\x51\x74\xd1\x78\x73\x75\x90\xe6\xd3\xaf\x28\x29\x4a\x34\x76\x55\x95\xce\x00\x55\x50\xce\xa0\x44\x11\x26\x59\x71\x36\x86\xbc\xae\xd6\x81\xd6\xc5\xb0\x34\xa6\x4b\xf5\x98\x77\x22\x58\x23\xb0\x04\xeb\xb1\xa0\x14\xb0\xd7\x81\x63\xcf\xc1\x53\x91\x68\xc7\x54\xc3\x23\xdd\x42\x03\xad\xd4\x90\x0f\x49\xd3\xf4\xa8\xae\x27\xd5\xce\xf6\xf6\x74\x12\x5d\x0d\xc3\x12\x32\x70\x15\x0c\x93\xcc\xd5\xc1\x95\x38\x6b\x10\x0c\x73\xa8\xb7\xdd\x38\x2a\x81\xa7\x55\xb9\xbd\x94\xde\x6e\xc4\x97\xcf\x1d\x4f\xca\x22\x4e\x43\xc3\xdc\xf1\xb2\xa6\x93\xf3\xc1\x16\x7a\xfb\xe1\xe0\x60\x0b\x0d\xa8\x14\x56\x69\x21\x4d\x23\x92\x89\xdf\xe7\xfa\x19\xec\x1e\x94\x7f\xbd\x7e\x6e\x7f\xf3\xc9\xd9\x9b\xe2\x37\xd8\x95\x67\xbf\x9f\xfc\xda\xdc\x67\x84\x5a\x4c\x0c\x66\x04\x11\xb2\x43\xd9\x0e\xd7\x43\xc9\xb8\xe5\xad\x74\xcf\x4e\xa0\xb7\xb1\xc5\xb9\xf6\x3c\xd1\x80\x93\x84\x59\x2c\x34\x18\xec\x88\x64\x38\x21\x86\x8b\xc8\xa4\x8f\x5e\x76\xd8\x12\x77\x62\x4b\xac\xc9\x96\x24\xd4\x58\xca\x5a\x91\xf2\xf4\xd4\x3d\xdd\xdd\x3e\x7f\x3f\xd3\x7f\xbc\xfb\x78\x92\xc6\x4f\x4f\x4f\xc5\x51\xfe\xfc\xe8\x3a\x5b\x6a\x87\xca\x1d\x66\x87\x94\x18\xa6\xd4\x8f\x64\x2b\x30\xc7\x15\xa7\x0c\x7b\x6b\x2c\x16\x84\x03\x76\x5e\x6a\x4c\x54\x20\x52\x3a\x0d\x2e\xb0\x25\x5b\x86\x98\x21\xd9\x98\xad\xa5\xf4\x3a\x6c\x69\xad\xa9\x16\x54\x34\x22\xfe\x0b\x4f\x0e\xff\x7c\xf5\xce\x7c\xdd\xe5\x7f\xee\x7f\xf8\xbc\x17\x9f\x25\x7c\x7e\xf8\x69\x8f\xbd\xf8\x8e\x6d\x11\xbb\x43\xd4\xd0\x70\x6b\x8d\xfd\x91\x6c\x09\x2e\x0d\x31\x96\xe1\xe0\xa2\xc1\x42\x19\x87\x1d\xf1\x1e\x83\xb7\x91\x00\xb1\x10\x9c\xb8\x60\x8b\xca\xbb\xb0\xb5\x90\x5e\x8b\x2d\xa3\x04\x97\xba\xc5\x7b\xfa\x56\xb8\x71\xf1\xfb\xa7\xbf\xfe\xfe\xf0\x92\x7d\x2c\x8e\xe2\xe1\x2b\xfa\xee\xd5\xbb\xf3\x52\x3e\xbb\xca\x96\x44\x94\xef\x48\xb9\xc3\xc8\xb0\x61\x9a\xfe\x50\xb6\x98\x11\x91\x59\xe9\xb1\xa4\x26\xc1\x22\x2a\x8d\xad\xb5\x80\xad\xb0\xca\x44\x02\x10\x2d\xb9\x60\x8b\xd9\xbb\xb0\xb5\x90\x5e\x87\x2d\xa3\x98\x90\x72\x61\x5b\x2c\x1b\x15\x1f\x66\xb3\xbc\xf8\xc4\xa5\x9d\xa4\x6c\x3f\x77\x47\xdb\x5f\xab\x93\x3a\xed\x8e\x44\x8b\x29\x41\x8c\xef\x50\xba\x43\xc9\xd0\x30\x69\x8d\xbc\x03\x5b\xcb\x38\xa2\x33\x09\x11\x45\x94\x70\xb1\x99\x25\x04\x16\x96\x08\x6c\x9d\x02\x9c\x44\xa1\xa4\xb4\x3c\x52\xdf\xfa\x8d\xaa\x76\x3e\x83\xe6\xea\x7f\x54\x78\x1b\x55\xb7\x43\xa9\x45\x44\x36\xe6\xcf\xc5\x90\x29\xca\x04\x5d\x43\xc5\xde\xae\xf3\x36\x28\x94\x19\x6f\x02\xb3\x58\x12\xd9\x0c\x13\xc1\xb1\x01\xa5\xb1\xa3\x8e\x00\x0f\x4a\xd0\xd0\x1a\x9a\x87\xda\xb5\x40\x92\xa0\x13\xce\x6f\x06\x22\x38\x17\x3f\x03\x88\x33\xda\x11\xde\xf4\x49\x33\xfd\x0a\xed\x28\x36\x31\x08\xcc\x25\xd1\xde\x81\xa5\x00\x2d\xc1\x2e\x9b\x8c\x16\x48\x68\xe2\xbd\xf9\x7f\xba\x44\x6a\xb9\x16\x92\xbe\x63\xe8\x1b\x24\x8b\xc8\xf5\x12\x88\x75\x2c\x82\xd7\x04\x73\xed\x01\x0b\xc2\x14\x36\x92\x27\xd8\x27\x31\x2a\xcf\x85\xf6\xbe\x35\xa9\xa3\x95\x71\xed\x17\x25\xba\x1c\x43\x28\x64\xd3\xaa\x86\xb2\x09\x6a\x12\x97\x55\xb0\x85\xea\x72\xba\xfa\x5e\x16\x0d\x5e\x4c\xcb\x62\x02\xdb\xbb\x50\x66\x8b\xf0\x8f\x4a\x34\x4e\xf3\x69\x0d\x8d\x20\xdb\x42\x03\x45\x3a\x05\x37\x70\x64\x89\x62\xeb\x70\xb4\xe6\xc8\xb9\x85\x2a\x9e\x00\x25\xc2\x12\x1c\xa3\xe6\x58\x78\x61\xb1\xd7\xcc\x61\x66\x5c\xa0\xd6\x85\x24\xc4\xd0\xd4\xb6\xbb\x34\xde\x77\x65\x31\x2e\x6a\x88\xa8\x35\x02\xb4\xf4\x57\xd5\x16\x6a\x0c\xca\xd5\x61\x84\xfc\xf4\xa4\x42\xd5\x04\x42\x9a\xa4\xa1\x29\x3e\x2b\xa6\x25\x0a\x45\x9e\xa4\x27\xd3\x45\xa6\x32\xb8\xca\xe7\x3d\xb0\xaa\x39\x13\x6b\x59\xde\x5a\x83\xf8\x16\x4e\xa5\x37\x94\x28\x43\x30\x70\xe5\xb0\x30\xda\x36\xf1\x86\xc3\x22\xb1\xc6\x82\x21\xde\xd8\xb6\xae\x67\x17\xe3\xe8\x7d\xe9\xc2\x69\x85\xc2\xb4\x2c\x21\xaf\x51\x84\x19\x64\xc5\xa4\x09\xab\xd1\xbc\x28\x4f\xdb\x2c\x28\xad\x2e\xc8\x8e\x28\x29\xe1\xcb\x14\xf2\x3a\x3b\xbb\x8b\x81\x36\x33\x11\xef\x41\xa5\xb0\x74\x2d\xbf\xba\x9e\x1b\xf9\x86\xcb\x8b\x09\xcd\x2d\x06\xe2\x8a\x53\xcf\x3c\x55\xc0\x00\x4b\x9d\x18\x2c\xb4\x96\xd8\x30\x9d\x60\x93\x10\x4f\xa9\x03\xeb\x63\x6b\xf5\x93\xa2\xaa\xd3\xbc\xaa\x5d\x96\x35\x3f\xdb\xf0\xc0\xec\xed\x9a\xfa\x0d\x90\x37\xe6\xf9\xd9\xdf\xf2\xcf\xbf\xe7\xe7\xcf\x0f\xce\xde\xc7\xd3\x57\x9f\xff\xd8\xfe\x74\x92\xfc\xfe\x57\xce\xfe\x3c\xf9\xf0\xa6\x38\x0d\xbf\x5e\xf2\x79\x85\xd6\xc1\xa0\xf3\xff\xbb\x81\x3d\x67\xcc\xb4\xa8\x7a\xa5\x2f\x3d\x41\x47\xe9\x58\xf0\x09\xc7\x8d\x41\x61\x01\x26\x60\x63\xc0\x60\x15\x13\x4b\x93\xc0\x94\x08\xea\x06\xd0\x87\x1f\x5e\xe6\xe3\x77\x92\x8e\x26\xfa\xfc\xec\xe9\xd3\xa7\x85\x4c\x76\x5f\xcf\x5f\x64\xaf\xf3\xf7\xcf\xc6\x95\xde\xce\x3f\xe7\xa7\x5f\xa7\x75\xbe\x7d\xf8\x7a\x6d\xd0\xab\xf8\x9c\xaa\x45\x50\xd0\x6b\x02\xea\x89\x99\x59\x1b\xa4\x88\x14\x73\x2e\x04\x16\x0e\x2c\x36\x2e\x32\x2c\x83\xe2\x51\xaa\xa8\xc2\x22\x8c\xf9\x0e\xe6\xa3\xbd\x99\xb1\x2f\x3f\x9d\x7f\xd5\xaf\xbf\x3e\x7d\x9f\x7d\xfe\xe2\xdf\x56\x51\x17\xb9\x92\x45\xf1\xf1\xcb\xee\x79\xd8\x2b\x0f\xf6\x0f\xc4\x7c\x6f\x74\xb8\x41\x47\x2f\xa2\x6c\xcb\xb4\x68\xf3\xcf\x7e\xb9\x44\x4f\xd0\x5a\x98\x98\xc8\x24\x60\xca\x9c\xc4\x22\xba\x88\x9d\xa6\x80\x85\x92\x21\x50\xa5\x0c\x11\xe6\x06\xd0\xf6\xd5\x87\x4a\xcc\x47\xe9\x79\x72\x36\xf3\x62\x7c\x92\x3d\xfd\xe8\xde\xba\x8f\xfc\xaf\x83\xc3\x4f\xf3\xea\x23\x7d\xf9\xea\xed\xab\xdf\xde\x4e\xc2\xfe\x89\x58\x0f\x74\x27\x58\x36\x4c\x32\xd1\x0e\xaf\x5e\x29\x41\x4f\xd0\x36\x44\xa1\x45\x90\x18\x12\xc7\x1b\x67\x61\x9b\xc9\x9e\x61\x69\x62\xf4\x46\x32\x88\xe6\xa6\x9e\xa6\x47\xf6\xfc\x70\xef\xe0\xe5\xe7\x31\x24\x9f\xf2\x17\xdb\x6e\x3f\x4c\xf6\x3e\x1f\xd0\xb7\xd5\xc9\xf4\xd5\xe8\xf0\xe5\x67\xf2\x61\x6f\x2c\x13\xf2\xc6\x9a\x35\x40\x5f\x8d\x79\x2d\xe5\x5a\x9b\xde\x51\xc9\x72\xc5\xe6\xc8\x8d\x27\x19\x5c\x59\x99\xa1\x3f\x60\xcd\xc6\x2b\x21\x0d\x21\x12\x9b\x44\x10\x2c\x14\xd3\xd8\x73\xee\xb1\x07\x4d\x9c\xa6\x26\x08\xb3\x88\x68\xae\x35\xdf\x94\xfe\x36\xad\x6a\xe4\xf2\x2b\x6d\xd7\x05\xaa\x46\xc5\x1c\xd5\x23\x40\xc1\x4d\x9c\x4f\xb3\xb4\x4e\xa1\x42\x45\x82\xde\x82\x2f\x5d\x75\xea\xee\xba\xa6\xd3\xe2\xab\xcf\x26\xb0\x85\xa6\x65\xb6\x85\x92\x34\x83\x05\xdc\x19\x94\x55\x0b\xb5\xa3\xd2\x71\xf3\xb4\x2b\xc3\xa8\x83\x5b\x52\x2b\x1b\x2f\x88\x65\x62\x18\xa6\x14\x24\xb6\x51\x13\x9c\x40\x92\x18\x6a\x43\x0c\x36\x19\x6c\x21\xd1\xc9\xa4\xe6\xf3\xf9\xf0\x34\xcd\x67\x45\x76\x3a\x4c\x8b\x36\x4b\xaa\xa1\xaa\x8f\xe9\x90\x0c\x5b\x1b\x5e\x5d\xf4\x24\xf5\xa6\xcc\xef\xee\xe8\x28\x53\x56\x27\x4e\x34\xe8\xf8\xdd\xd1\xf1\x0b\x74\xfc\x41\xa0\x33\x84\x08\xdf\xb8\x09\x99\x58\x7d\x77\x74\xe2\x02\x9d\x78\x10\xe8\xdc\xf2\xd3\xa0\x33\x77\x47\x27\x2f\xd0\xc9\x3b\xa0\xbb\xc8\xe8\x3a\x7e\x25\x14\x59\x51\x5e\x07\xb3\xe4\xe1\x7b\xc0\x7c\x02\x9c\x79\xd1\x00\x33\xe1\x66\x60\x83\x37\xae\x49\x91\xda\x34\x90\x90\xbd\x3d\x42\xd6\x50\xbc\xaf\x6d\xdc\x0b\xc0\xe0\x59\x04\x70\xe6\x96\x51\xd7\xc9\x0e\xff\x47\x88\xb5\xfb\xfb\xeb\x00\xec\x39\xb4\xef\x05\x60\x5c\x7e\x6e\x03\xb8\xef\xd2\x2c\xcd\x4f\x5a\x84\xcf\x9e\xad\x8b\xb0\xe7\x00\xb8\x2d\x57\xf7\xc1\x39\x65\x7c\xb8\xc5\xc3\x37\x89\x67\x44\x2f\xf6\x18\x9a\x56\x78\x0e\x55\x8d\xd9\x45\xe9\x32\x67\x5f\x6c\x49\x54\x5b\xa8\xb9\x8b\x42\xe1\xaa\xfa\x9f\x4c\xdf\xfb\xd2\xd6\xd7\xfa\x7a\xf1\x72\x0b\xb7\x9a\x68\xc1\x94\x70\x98\x11\x4d\xb0\xf0\x46\x60\xab\x20\x62\xe3\x98\xb2\xd1\x3b\x49\x18\xfd\x96\x5b\x70\x55\x8d\xe9\x4d\xdc\x36\x77\xff\xfd\xdc\xf6\xe2\xe5\x36\xbb\xa5\x94\x18\xca\xdd\x6d\x76\x7b\xe8\xf0\x73\x98\xb5\x57\xcf\xda\x44\xbe\x9b\xdd\xaf\x78\x3d\x3a\x8b\x39\xdc\x29\x9b\xbf\x2f\x4e\xfb\x4e\x07\xbd\xf8\xb8\x85\xd3\xb0\xfc\xdc\xc6\xe9\xd2\x71\xa1\x4b\x6e\x57\x25\xff\x4a\x8e\xfb\x3a\xec\x5e\xfc\x7c\xc3\x71\x9b\x39\xe5\x61\x19\xf2\xa4\x93\xce\x3c\x71\x71\xab\x1d\xed\x94\x0c\x9b\x7f\xd7\xec\xbe\x87\x3c\xeb\xc8\x5f\x4b\x79\x7b\xc8\xf3\x8e\x3c\xdf\x40\x5e\x74\xe4\xaf\x65\x9f\x3d\xe4\x65\x47\xfe\xda\x3a\x45\x0f\x79\xd5\x91\x57\x1b\xc8\xeb\x8e\xbc\xde\x40\xde\x74\xe4\xcd\x06\xf2\xb6\x23\x7f\x2d\x97\xeb\x63\x3f\xa4\x6b\x40\x64\x93\x1a\xae\x98\xe0\x26\x36\x48\xbb\x46\x48\x6f\xb4\xc2\xee\x01\x98\x4e\x1e\xb6\xcc\x99\x96\x27\x41\xda\xa8\x7d\x75\xbd\xba\x58\x6c\xa6\xad\x7e\x5e\x1d\x3e\xbd\xdd\xe9\x06\xd3\xfa\x7d\x2a\xbf\xde\x5c\x70\x2f\xca\xb3\x8d\x95\x5f\x27\xcf\x7d\x70\xcc\xaf\x93\xc6\x6e\x14\xb1\xdc\xa7\xf2\xeb\x64\xa9\xf7\xa4\xfc\xe6\x66\xa3\x7e\xbe\xf2\xb4\xab\x3c\x5f\x47\x79\xfd\xf3\x95\x17\x1b\x33\x6f\xd6\x1a\xb0\x1b\x44\x94\x6b\xda\xbc\x5e\x47\x79\xfb\xf3\x95\xbf\x62\xf3\x6c\xad\x49\x6a\xad\xe5\x99\xfb\xd1\x7e\x73\xa3\xa7\xeb\xcd\xb1\x0f\x4d\xfb\xf5\x92\xd8\x0d\x82\x7c\x17\xea\x74\x96\xd6\x67\x2b\x8d\x57\x4a\xe4\xc5\xfc\xf1\x13\xe4\x6a\x54\xa7\x63\x40\xe7\x45\x0e\x68\x30\xad\xc3\x00\xe1\x46\x12\xca\x99\xcb\xd0\x80\xa3\x51\x31\x2d\x97\x7b\xc2\x62\x83\x45\xe4\xde\x2b\x0d\x7d\x33\xf4\xcb\xd8\xea\xc7\x22\x55\x2b\xa4\xb2\xed\xc4\xff\x2e\x52\xca\x56\x50\xf9\x62\xaf\xff\xbf\x0b\xd5\xac\xa0\x8a\xff\xb8\xfd\x32\xb1\x82\xca\x16\xeb\x11\x0f\x17\xea\xca\xa5\x56\xb5\xab\xa7\xd5\xf1\x28\xad\xea\xa2\xfc\x0e\xf2\x6e\x8f\xf5\x62\xe1\xb2\xbf\x7f\x42\x40\x7a\x1b\x1a\xb9\x21\x1a\xd4\x5d\x69\x7a\x80\xb8\xd4\xba\xb8\xec\x43\xee\x25\xbd\x21\x1a\x24\x1e\x78\x37\xb1\xbb\x03\x43\x94\xa0\x0a\x42\x91\xc7\x07\x8a\x51\x74\x76\xf1\xfb\x05\x38\xea\x21\xdb\xa2\xdc\x14\xce\xbf\xc5\x65\xf4\x07\xa6\x1f\x72\x3f\xe9\x4d\xe1\xfc\x6b\x9c\xc6\x5d\x90\xfd\x2c\xaf\x01\x33\xc8\x6b\xf4\x78\x52\xc2\x2c\x2d\xa6\xd5\xf1\xea\x00\x07\x94\x65\x51\x1e\x87\x22\xc2\xd6\x25\x13\xed\x76\xf9\x37\x5b\xe9\x6d\x0d\xc7\xf5\xd9\x04\xda\x43\x57\x15\x64\x10\xea\xcb\xc3\x61\x1b\xa5\x71\x50\x0f\xd3\xb8\x78\xb5\xf1\xb2\x7a\x04\x35\x9a\x8f\xa0\x6c\x2e\x86\x6d\xc1\xaf\x88\xb7\x1b\x56\x50\x0f\x4b\xa8\xa6\x59\x8d\x7e\x45\xe4\xc6\x93\x64\xec\x07\x9c\x24\xd3\x86\x44\x65\x05\xc1\xd6\x09\xb3\x38\x43\x6e\x4c\x4c\xb0\x95\xde\x29\xee\x3d\xd8\xe0\x07\xdf\x3d\x49\x86\x5a\xfc\xcf\xf2\xa2\x1e\x41\x89\xaa\x6b\xf7\xb7\x50\x02\x90\xa1\xa4\x04\x40\x75\x81\x4a\x18\x17\x33\x40\xe3\xc5\x0e\xd7\x4f\x3d\x45\x06\x89\xa7\x46\x05\x8b\xa3\x0c\x1e\x8b\x98\x30\x6c\xb9\x61\x38\x08\xc3\x28\x88\x18\x82\xf0\x9d\xb3\x3a\x3b\xdb\xdb\x59\x11\x5c\x36\x2a\xaa\x7a\xc7\x10\xb2\x78\xd5\x26\xc2\xb8\x38\x9e\xd1\x8b\x17\x77\x56\x17\x3d\x09\xbd\xbf\x93\x48\xde\x31\xe3\x12\x61\xb0\x97\xde\x62\xa1\x08\x60\x2b\x94\xc3\xe0\x9d\x25\x2a\x80\x8e\x2e\x59\x03\x1d\xbd\x40\x47\xef\x80\xee\x87\x9c\x63\x71\x3a\x98\x60\x9d\xc0\x91\x39\x8e\x85\x96\x11\x7b\x50\x02\x5b\x4a\x93\xc4\x44\x05\xd6\xb6\xab\xa1\x9d\x93\x48\x97\xef\x08\xf5\xb5\xf3\x9e\xb6\x71\xdb\x31\x16\x49\x1d\x67\xce\x59\xcc\xa5\x64\x58\xd8\x24\x60\xc7\x4c\xc0\x4a\x0a\xee\x43\x48\x08\x51\xf6\x52\x57\x84\x51\x5c\x6c\x5c\xbf\x1f\x01\xca\x5c\x0d\x55\x8d\xaa\x7a\x9a\x24\x68\x9e\x66\x19\xf2\x80\x5c\x36\x77\x67\x15\x6a\xbc\xc5\x3f\xb9\x65\xdd\x97\xb6\xbe\x7d\xd3\x8b\x97\x27\xbf\x3c\xfa\xbf\x00\x00\x00\xff\xff\x8e\x51\x82\xe3\xed\x3e\x00\x00")

func dbSample_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbSample_dataSql,
		"db/sample_data.sql",
	)
}

func dbSample_dataSql() (*asset, error) {
	bytes, err := dbSample_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/sample_data.sql", size: 16109, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0x3c, 0x43, 0xae, 0x85, 0x22, 0x83, 0xf1, 0x1e, 0x53, 0xc9, 0x70, 0xbd, 0x49, 0xc0, 0xb3, 0x87, 0x92, 0x47, 0x79, 0x3, 0x1b, 0x2c, 0x9c, 0x87, 0x3a, 0x35, 0x40, 0xc, 0xe1, 0xd9, 0x5c}}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xc1\x6e\xe3\x36\x10\x3d\x5b\x5f\x41\xec\x25\x36\xea\x00\xe9\x22\xc9\x25\xc5\x9e\x7a\xee\xad\x67\x62\x42\x8e\x6c\xc2\x14\xa9\x92\x94\x1b\xe7\xeb\x0b\xca\x94\x44\x49\x94\xac\xb5\x5d\x34\xe8\xd5\x7a\x43\x0e\xdf\xbc\x37\x1a\xca\x8f\x8f\xe4\x97\x42\xec\x0c\x38\x24\x7f\x96\x59\xf6\xf8\x48\xfe\xc0\x77\x03\xf6\x00\xc4\xb2\x3d\x16\x90\x65\xcc\xa0\x7f\x8c\x1f\x0e\x95\x15\x5a\x11\x91\x13\xa5\x1d\xc1\x0f\x61\x9d\x25\xdf\xaa\x4a\xf0\x47\x6d\x6d\xf9\xed\xad\x05\x3b\x78\x97\x48\x1c\x42\x41\xd6\xd9\x4a\x70\xe2\x41\xa4\x34\xa2\x00\x73\x22\x07\x3c\x11\x8e\x39\x54\xd2\xd5\x0f\xe8\x0e\x15\xfa\x1c\xe8\xf1\x79\xbd\xd9\x66\x2b\x05\x05\x92\x23\x18\xb6\x07\xb3\xfe\xfe\xb2\xa9\xf7\x53\x95\x94\x84\xed\x91\x1d\xc8\xba\x06\xfc\xf6\x83\x3c\x3c\x6c\x48\xa5\xc4\x5f\x15\x6e\xb3\xd5\x79\x6f\x4e\x9d\x25\x4e\x14\x68\x1d\x14\xa5\xfb\x6c\x77\x62\x95\x31\xa8\x1c\x6d\x9f\xb5\xab\x66\x9b\x61\xe6\x95\x45\x63\xaf\x4a\xdd\x47\x5e\x4c\xbf\x05\x0d\x8f\x60\x91\x19\x74\x6d\xec\xcb\xd3\x38\x36\x40\xce\x91\xb7\x9c\x7a\x9b\xad\x7c\x81\x68\x73\xc4\x76\x23\x83\x39\x1a\x54\x0c\x6d\xa8\xa0\xe0\x1b\xa2\x15\xe1\x28\xd1\x21\x61\x60\x19\x70\x8c\x49\x13\x8a\xe3\x87\x87\x04\xde\xc2\xba\x23\x5a\xa1\x2c\xa5\x60\xe0\xbc\x8a\x6e\xd6\x45\x8a\x9c\x88\xd4\x6d\xb6\xe2\x68\x99\x11\x65\xbd\x9d\xc3\x0f\xf7\x1f\xb2\xe5\x95\x51\x17\xb9\x25\x67\x4b\x7c\xb2\x9b\xb1\xf6\x4a\x60\x07\xd8\xe1\x55\x04\xb9\x53\xe9\xab\xe1\x46\xc4\xd4\x0f\x7e\x90\x27\x0f\x3a\xa2\xa9\x7d\xdc\x29\x34\x21\xd1\x06\xd4\x92\x59\x19\x19\x45\xbc\x26\x44\x6d\x64\x87\xce\x85\xc4\x5e\xb5\x7e\x7d\x7a\x9a\x28\x89\x15\x9f\x91\x5b\x6a\xd4\x1e\xec\xbe\xfd\xe9\xf5\xf9\x56\x99\x47\xb2\x9b\xad\x5f\x4f\x9e\xf3\x65\x5c\xf7\xd7\xdc\x92\xc0\x57\xa2\x9e\x4c\x1b\xd4\x96\x02\xbb\x5a\xf6\x78\x44\xe5\x62\x8a\x5a\xf8\x43\xa9\xad\x13\xca\x3a\x90\xf2\xc1\xb3\xb4\x37\xba\xf0\xbb\x25\x6b\xdc\x46\x79\xa8\xdd\xc3\xf7\x97\xd7\x01\xcb\x0a\x91\x5b\x0a\xbc\x10\x8a\xbc\x6b\x2d\x11\x54\x1b\x95\x83\xb4\x9e\x00\x61\x29\x47\xe9\x60\x12\xc0\x85\xf5\x07\xa7\x25\x9c\xa4\x06\x4e\xdf\x81\x1d\x74\x9e\x8f\xf0\xce\xd4\x3d\xaf\x40\x07\x1c\x1c\x50\x2b\x76\x0a\x5c\x65\x90\x1a\x0b\x7d\xad\xf5\x32\x8f\x02\x3e\xfb\x02\xeb\xe3\x38\x02\x97\x42\xcd\x41\x6e\x51\x55\xf0\xe9\xac\xa2\x5a\x2f\x2f\x6f\xa1\x03\xb9\x74\xbb\x8c\x85\xb5\x07\xa5\x50\xfe\xeb\x6f\x58\xcf\x93\x96\xda\x24\xf1\x5f\xc9\x9a\xc3\x8a\x5c\x2e\x84\xc5\x36\x93\xa6\x3d\x0f\x8d\x3d\xea\xd2\x5d\xa5\x1a\xfe\x67\x6a\xb4\x33\xba\x2a\xaf\x9b\x24\x6e\x7c\xd9\xc5\x2c\x1b\x2d\xa5\xae\x1c\x15\x8a\x96\x46\xef\x0c\x5a\x9b\x76\x6f\x4f\xdf\x5a\x0a\x76\xa2\x55\xc9\xc1\xa1\xa5\xa8\xfc\x81\x78\xd2\xc5\x89\x30\x0b\x39\xd2\x42\x73\x5c\x1a\xa0\xf3\x5c\x30\xa4\x7b\x5d\x99\xe5\xc9\x79\x4d\x7d\xea\xc8\xe2\xcf\xf5\xfb\x23\x3c\x2d\xd1\x08\xcd\xa9\x50\x0e\xcd\x11\x64\xaf\x83\x0e\xc9\x9c\x08\x69\xe9\x0d\xcf\x0b\xf8\x68\x19\x29\xd1\x04\xbc\x7f\xe5\xe2\x0e\xcd\xd4\xaa\x13\x51\xe1\x7d\xdc\x23\xba\x3e\x92\xae\xdc\x92\x64\x07\x11\x77\x19\x09\xef\x6a\xc8\xe0\x90\x94\x21\x5b\xf3\xdc\xd1\x90\x8d\xd9\xba\x6d\x47\x7e\xac\xdf\x95\x8a\x35\xd3\x55\x6c\xaf\xd8\x98\x81\x67\xc1\x3b\x52\x45\x49\x84\x42\x77\x97\xc6\x37\x1e\x12\x9a\xbc\xa8\x75\xe0\xaa\xa6\x61\x58\x34\x02\x64\x9c\xd9\xa8\x75\x3f\xf5\x5b\xf1\x5c\x9f\x16\x2c\x1e\x08\xa2\xc0\x99\x74\x06\x13\xfb\x75\xa3\xe3\x2d\x7a\x0c\x7c\x04\x83\x6d\xb3\x95\x04\xeb\x68\xbd\x13\xcd\xb5\x69\x6c\xf5\xf3\x0b\xd7\xeb\x04\x07\xed\x0c\xa8\x71\x82\x03\x50\xf2\xec\xe1\xc8\x29\x5c\x37\x39\x9f\x7f\xff\xa9\xe6\xdb\x16\x60\x20\xd2\x94\x15\x3b\x4d\x4f\xf9\xf0\xae\xa6\xae\x5d\x96\xb2\x74\x63\xbf\x49\x47\xc7\x0e\x5b\x47\x27\xdc\x92\x7e\x82\x69\x77\xa7\x35\x19\x2d\xb3\x79\x5b\x18\x33\xd8\x6d\x69\x58\x73\xf0\x4b\xe6\xa5\x7b\x61\x9d\x36\xa7\x39\x13\x8f\x64\x3d\xa7\xae\xbb\x1a\xea\xff\xa3\xac\xb9\x29\x7a\xb2\x24\x0b\xf5\x32\x0c\x5b\x2e\x99\x61\xe4\xa4\x6a\xea\x5b\x1d\xad\x2f\xe6\x33\x42\x69\x6e\xf4\xbd\xf1\xc2\x8f\x74\x68\x7d\xa9\x13\x4f\xe2\x41\xb0\x77\xf3\x99\x6e\xf7\xe7\x0b\xe6\x4c\x16\x37\xdd\x93\x0c\x1e\x85\xae\xd2\x77\x52\x7f\xbb\x35\x46\x1b\xca\xfc\xa8\x38\xf8\x58\xf0\x85\xa5\xda\x15\xcf\xaf\x35\x1a\xff\xa2\xe5\xe2\x32\xfb\xd5\x92\x72\x0d\x05\x98\x17\x67\x00\x5d\x94\x62\xc0\xf5\x52\x1c\x7f\x8a\x63\x4e\x1c\x85\x9b\x6d\x52\xb7\x54\x9d\x49\xb0\x36\x25\x4f\x8b\x47\x34\x7e\xe3\xc4\xb3\xeb\xc6\x8b\x2f\xd0\x83\xae\x9a\x75\xbb\xd8\x29\xa1\x2f\xd7\x77\x52\x55\x5d\x8d\x2f\x6a\xa6\x83\x46\xfd\x6a\x1a\xd4\x9b\xb0\xa7\x61\x7d\x3d\x27\x3f\x73\xd2\x66\xa9\x77\x09\xec\x20\x85\xad\xfb\xd0\xed\xdf\x56\x12\x15\x49\x2d\x72\xb1\x34\xbd\x99\xa5\x4b\x6b\x4b\x22\x0a\x6a\xf2\xe3\xbf\x52\x7e\xd7\x7f\xab\x2c\xe3\x46\x97\xcd\x84\x90\x37\x7f\x97\xd4\xdf\x88\xc3\xf2\x6f\x69\xc8\xf9\x23\xfa\x3c\x26\xd6\xf2\x3c\xb2\xa1\x69\x1e\xd5\xff\xea\x74\x01\x1b\x38\x9b\x47\x05\xbf\xcc\x83\x5a\x55\x2f\x83\x35\xb7\xa3\x85\xe8\xe5\x24\x4d\xbd\xbd\xe7\xa3\xa2\xd6\xbe\x00\x78\xa9\xa2\x8d\x6b\x16\x95\x33\x61\x9b\x36\xee\x9f\x00\x00\x00\xff\xff\x68\x7f\xaa\x79\xd5\x1b\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 7125, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x34, 0xf7, 0x7a, 0x71, 0x9b, 0x8b, 0x7b, 0xc6, 0x47, 0x8a, 0x1b, 0x3e, 0xb5, 0xb5, 0x2f, 0x29, 0xf5, 0xc3, 0xce, 0x5b, 0x2f, 0xc1, 0xd8, 0xdd, 0x23, 0xa0, 0x20, 0x34, 0x50, 0x6, 0x9f}}
	return a, nil
}

var _dbMigrations0002_event_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8b\x1a\x4f\x10\xc5\xef\xf3\x29\xde\x41\x50\xf9\x8f\xa2\xff\xe4\x10\xf0\x64\x58\x59\x16\x42\x72\x08\x9e\x43\x3b\x5d\x8e\x4d\x7a\xaa\x3b\x55\x35\x26\x7e\xfb\xd0\xad\xbb\x28\x49\x2e\x03\x3d\xf5\xde\x9b\xdf\x9b\xea\xc5\x02\xff\x0d\xa1\x17\x67\x84\x7d\x6e\x9a\xc5\x02\x2f\x1c\x2c\xb8\x08\xef\xcc\xd5\x17\xbb\x33\xb1\xc1\x2e\x99\xb4\x1c\xb7\xde\x23\xdc\x34\xf4\x36\xc2\xd9\xc5\x91\x14\xe1\x08\x3b\x11\xcc\x1d\x22\x21\x28\x68\xc8\x76\x69\xee\x3f\xf3\xd5\x9c\xd1\x40\x6c\x1f\xa9\x0f\xdc\x3c\x7d\xc1\xa7\xed\xe7\xe7\xfd\xf6\x79\x87\x1c\x73\xaf\x3f\x22\x26\x93\xe6\x50\x87\x00\x4a\x22\x27\x03\xfd\x0a\x6a\x8a\x99\x52\xa4\xce\x10\x3c\x8e\x92\x86\x2b\xc1\xb7\x4a\x10\xc3\x10\x0c\xeb\x79\x01\xb8\x5a\xab\x9d\x95\xc4\x10\xd8\xd2\xbd\x78\x56\x9e\x2d\x84\x74\x8c\xd6\xc2\x93\x76\x12\xb2\x85\xc4\xf3\x5b\x95\xb7\x84\xd9\xbb\x16\xab\x16\xd3\x17\x56\x73\xdc\x11\x84\x72\x12\x23\x0f\xc7\x20\x91\x24\xf0\xa3\x04\xee\xcb\x79\xcc\xbe\x94\x54\xa3\xbc\x9c\xce\xdb\x87\x90\x75\x8b\xe9\xbe\xce\x05\x27\xa7\xc8\x92\x3a\x52\xad\x41\x1e\x2e\xe7\x18\xc8\x23\xbb\xee\xbb\xeb\xe9\x0f\xf7\xff\x77\x08\x8a\x31\xf7\xe2\x3c\x79\x58\x42\x37\x8a\x94\x3d\x74\x27\xc7\x4c\x11\x67\x12\x0d\x89\x1f\x13\xd6\x37\x80\xa7\xf4\x93\x63\x72\xbe\xf0\x46\x67\xa4\xf6\x0f\xfd\xfb\x7b\xe0\x57\x2a\x38\x91\x70\x26\x0f\x1d\xbb\xc2\x7e\x1c\x63\xbc\x3c\x1a\x3f\xac\x56\x57\x67\x85\x8d\xf1\x55\xba\xc4\x2d\xaa\x4b\x43\x8e\x54\x7e\x35\xb2\xd4\x95\x90\xc7\xe1\x52\x36\x55\xcb\x2d\xa7\xf3\x4d\x8d\x23\xf6\x08\xc7\x4d\x43\xec\x37\xcd\x64\xb2\xf9\xfb\x35\xda\xb1\x6f\x1e\x26\xa5\x61\xf3\x3b\x00\x00\xff\xff\x2e\x82\xee\x9e\xd9\x02\x00\x00")

func dbMigrations0002_event_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0002_event_dataSql,
		"db/migrations/0002_event_data.sql",
	)
}

func dbMigrations0002_event_dataSql() (*asset, error) {
	bytes, err := dbMigrations0002_event_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0002_event_data.sql", size: 729, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0xe9, 0x46, 0x83, 0xf5, 0x9c, 0x90, 0x5b, 0xa7, 0xd8, 0xdf, 0xb6, 0xb9, 0xf4, 0x9e, 0x1a, 0x6b, 0x5f, 0x66, 0x58, 0x61, 0xb9, 0x54, 0x3c, 0x93, 0x3b, 0xd9, 0x5b, 0xae, 0xf, 0x92, 0x8f}}
	return a, nil
}

var _dbMigrations0003_longer_team_namesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x28\x49\x4d\xcc\x55\x80\x08\x24\xe7\xe7\x94\xe6\xe6\x29\xe4\x25\xe6\xa6\x2a\x94\x54\x16\xa4\x2a\x94\x25\x16\x25\x67\x24\x16\x69\x18\x1a\x18\x68\x5a\x73\x71\x21\x1b\xe3\x92\x5f\x9e\x47\xba\x41\x46\xa6\x9a\xd6\x5c\x80\x00\x00\x00\xff\xff\x92\xc6\xdf\x09\x8e\x00\x00\x00")

func dbMigrations0003_longer_team_namesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0003_longer_team_namesSql,
		"db/migrations/0003_longer_team_names.sql",
	)
}

func dbMigrations0003_longer_team_namesSql() (*asset, error) {
	bytes, err := dbMigrations0003_longer_team_namesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0003_longer_team_names.sql", size: 142, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xbb, 0x50, 0xf, 0x77, 0x25, 0x2e, 0xe6, 0x66, 0x6, 0x9c, 0xed, 0x44, 0xb2, 0x8a, 0xa6, 0x3c, 0xe7, 0xef, 0xb2, 0x49, 0x4, 0x81, 0x57, 0xc7, 0x6d, 0x91, 0x47, 0xe, 0xba, 0xb0, 0x57}}
	return a, nil
}

var _dbMigrations0004_rename_coreos_actionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x48\xce\x2f\x4a\xcd\x2f\x8e\x4f\x4c\x2e\xc9\xcc\xcf\x53\x28\x4a\xcd\x4b\xcc\x4d\x55\x28\xc9\x57\x48\xcb\x49\x2c\x49\x4e\x2c\x82\x4a\x58\x73\x71\x21\x1b\xe2\x92\x5f\x9e\x87\x6a\x0c\xaa\x72\x24\x73\x50\xcc\xb7\xe6\x02\x04\x00\x00\xff\xff\xcf\x20\x82\x03\x8b\x00\x00\x00")

func dbMigrations0004_rename_coreos_actionSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0004_rename_coreos_actionSql,
		"db/migrations/0004_rename_coreos_action.sql",
	)
}

func dbMigrations0004_rename_coreos_actionSql() (*asset, error) {
	bytes, err := dbMigrations0004_rename_coreos_actionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0004_rename_coreos_action.sql", size: 139, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0x8b, 0xdd, 0x9e, 0x19, 0x1e, 0xdd, 0xa3, 0xd6, 0x9c, 0x2d, 0x5, 0x74, 0xe6, 0x9c, 0x1, 0xac, 0xde, 0x80, 0x9b, 0xa1, 0xb, 0xa8, 0xe2, 0xa4, 0x70, 0x48, 0x9b, 0xed, 0xe5, 0xae, 0xc6}}
	return a, nil
}

var _dbMigrations0005_default_team_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x4a\xc3\x40\x14\x46\xf7\xf3\x14\xdf\x22\x90\x04\x3b\x42\x7e\xc0\x86\xac\x2a\x2d\xdd\x88\x5d\x48\x1f\x60\xd2\x7b\x13\x07\x66\x26\x31\x73\xab\xf6\xed\xc5\x04\x0a\x2e\x5c\x7f\xe7\x9c\xcb\xd5\x1a\x0f\xde\x0e\xb3\x11\xc6\x79\x52\x4a\x6b\x9c\x82\xbb\xc1\x10\xc1\x40\xd8\x78\xd8\x1e\x56\x40\x23\x47\x84\x51\xc0\xdf\x36\x0a\x6e\x2c\x8f\x0b\x7d\xb7\xdf\xc4\x08\x7b\x0e\xf2\xcc\x83\x0d\x4a\xed\x4f\x78\xd9\xbd\x1e\xcf\xbb\xe3\x01\x93\x9b\x86\xf8\xe1\x90\x24\xaa\x5b\x56\x00\xbf\xdd\x7b\x2f\x22\x8b\xec\xf8\x22\xb0\x84\x7e\x1e\xfd\x7a\xda\x59\x6f\x05\x45\x0e\x79\xe7\x55\x5a\xc4\x10\x79\x16\xd8\x20\xe3\x8a\x65\x96\x36\x08\xc6\x73\x8e\x4f\xe3\xae\x1c\x91\xa5\xb4\x6d\xaa\xba\xa4\x8b\x6e\xca\xa2\xd6\x75\x5d\x90\x36\xb5\xe9\x75\x47\xb4\xad\x9e\x4c\xd5\x95\x55\x93\x6e\x90\x12\xf7\xe6\xea\x24\xcd\xdb\xa5\xcf\x81\x60\xfb\x56\x71\xa0\x56\x25\x49\xfb\xcf\x8f\x87\x40\x7f\x97\xfd\xf8\x15\xd4\x4f\x00\x00\x00\xff\xff\xf8\x60\xa1\xfe\x4d\x01\x00\x00")

func dbMigrations0005_default_team_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0005_default_team_idSql,
		"db/migrations/0005_default_team_id.sql",
	)
}

func dbMigrations0005_default_team_idSql() (*asset, error) {
	bytes, err := dbMigrations0005_default_team_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0005_default_team_id.sql", size: 333, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0xdb, 0x8b, 0x9, 0xd, 0x3e, 0x9f, 0x64, 0xf9, 0x8f, 0x94, 0xe1, 0xf7, 0x95, 0x28, 0x12, 0xe7, 0xe6, 0x39, 0x30, 0xda, 0x5c, 0x68, 0x3d, 0x1f, 0xd0, 0xcd, 0x82, 0xd0, 0x8c, 0x4c, 0x52}}
	return a, nil
}

var _dbMigrations0006_initial_applicationSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6b\x4f\xdc\xba\x16\xfd\xce\xaf\xb0\x74\x2b\xd1\xaa\x78\xc6\xef\xd8\x53\xdd\x0f\xa5\x1d\xfa\xb8\x14\x7a\x5a\xa8\x5a\xbe\x54\xdb\xf6\xce\x34\x25\x93\x84\x3c\x60\xe0\xd7\x5f\x25\x0c\xaf\x73\x0a\x1a\xa0\x3d\x48\x68\xe2\x24\xdb\xf6\x5a\x7b\x79\xed\x3d\x43\x29\x79\x3e\xcf\x66\x35\xb4\x48\xf6\xab\xb5\x35\x4a\x49\x59\xe4\xa7\x04\x62\x24\x11\x5a\x20\x59\x4a\xa0\x20\x50\x55\x79\x16\xa0\xcd\xca\x82\xc4\x12\x1b\x52\x94\x2d\xc1\x45\xd6\xb4\xe4\x14\xdb\xd1\x10\x77\x39\xcf\xe7\x16\x5a\x9c\x63\xd1\x6e\xe2\x2c\x2b\xd6\xd6\x5e\xef\x92\xed\x97\x3b\x6f\xf6\x5f\xbe\x99\x92\x2a\xaf\x66\xcd\x51\x4e\x9e\x3c\x59\xf3\xc3\x53\x42\x48\xbf\xc6\xe5\x7c\x0d\x79\xda\x60\x8e\xa1\x25\x59\x24\x69\x5d\xce\x6f\xac\x9d\x67\xf3\xac\x25\xfc\x19\x69\x7f\xe0\x79\xec\x10\x5f\x34\x58\xb7\x24\x2b\xda\xf2\xc6\xdb\x4f\xb3\xb8\x41\x0a\x98\xe3\x06\x89\xd8\x84\x3a\xab\xfa\xdb\x1b\xa4\x45\x98\x7f\xcf\xe2\x33\x72\x0c\x79\x87\x0d\x79\xba\x8e\xce\x08\xcb\xc1\xd0\xc8\x21\xa5\xca\x47\xa4\x0e\x18\x50\x97\xf8\xc4\xa0\x36\x31\xe8\x64\x7d\x83\xac\x6f\xe5\xd0\x06\xa8\xc9\xab\xb2\x68\x21\x2b\xb0\x26\xdb\x59\xd1\x2d\xfa\x47\xc3\x05\x49\xcb\x9a\xcc\xa1\x69\xb2\x63\x24\x0d\xd6\xc7\x58\x93\x88\x55\x5e\x9e\xf6\x7c\x34\xfd\x7b\xd1\x3a\xa9\x44\x0c\xd4\x09\xae\xa8\x52\x3c\x52\x50\x90\x52\x1f\xa3\x95\x09\x48\x2f\xa4\x5b\x7f\xf6\x62\xed\x12\x1d\xa5\xa4\x69\xc1\xe7\x48\xc2\x0f\x28\x0a\xcc\x49\x57\x45\x68\xf1\x97\xf0\x2b\x08\x87\x30\xc3\x2b\x64\x56\x79\x15\xb4\x73\xd4\x79\xe3\xa9\x52\x60\xa9\xe7\x32\xd0\xa8\x84\x91\x69\x9a\x32\xc5\xe4\xfa\x06\xe1\x1b\x64\x5d\x70\xc7\x47\x7a\xc4\xfa\x5d\xfe\x68\xdb\xaa\x99\x8c\xc7\xe7\x4b\x8d\x6a\xcc\x11\x1a\x1c\xa5\xe7\xf8\x69\xde\x83\x1d\x15\xd8\x8e\x61\x1e\x8d\xa2\x5d\x53\x8f\x2f\xc2\xc7\x7d\xfc\xf2\xc5\xef\x55\x5d\xc6\x2e\xf4\xb4\x7f\x5f\x4e\x35\x3b\xbb\x83\x48\x72\x7d\x0f\xca\x68\x6b\xb9\x4d\x78\x3f\xa8\x65\xd1\xa5\x61\x31\xfb\xb0\x77\x00\x8b\x6f\xd3\xa3\xed\xe7\x0b\x71\xf6\xae\xc4\x57\xf9\xe1\x7f\xfb\xe7\x82\x71\x47\x99\xa3\x4c\x13\xce\x26\x8a\x4f\x98\x1b\x09\xa3\x8d\x4d\x9e\xb3\x61\xb6\x95\x52\xfc\xec\xc5\x2f\x59\xbd\x40\x03\x03\x92\x2b\x72\x79\x6a\x90\xfb\x90\x52\x85\xde\x53\x95\xa2\xa1\x36\x80\xa4\x22\x78\x03\xd1\xb1\xa8\x63\xec\xd7\xae\xca\xa6\xcd\x8a\xa6\x85\x3c\xef\x87\x83\x5c\xde\x1d\xbe\xfc\xdf\x97\x83\x6f\x62\xfa\x7e\x2b\x3b\xd9\x9b\xe7\x6d\xf6\xfe\x60\x7b\x6b\xfb\xa5\x5e\xec\x8d\xb7\xca\xe8\x7f\x7e\x99\x1d\x1d\x9e\x6e\x8d\x4f\x6d\x8f\x2f\x85\xbc\xc1\xcb\x8f\xb6\xee\x70\x39\xcf\xc5\xff\x39\x7e\x4b\x05\x23\x8c\x4d\xb8\x98\xc8\x64\xa4\xa5\x10\x76\x60\x6f\x25\x15\x5c\x03\x4f\x29\xf1\xd8\xc2\x83\x14\x17\x7c\xe0\x01\x8c\xa5\x69\x22\x1d\x55\xb2\x27\x9a\xfb\x40\xb5\x12\x80\xc1\x21\x42\xd0\x17\x8a\x13\x2a\x19\x89\x87\x2b\x6e\x19\xfe\x38\xc5\x5d\xdb\x83\x32\x09\x53\xd6\x68\xd7\x0f\x76\xc1\x75\x56\xbe\x5e\x84\xe7\x87\xfe\xa0\xe8\xcc\xc9\x14\x16\x67\x65\xf8\x72\xfc\xbe\xbc\xa1\x38\x2e\x09\x97\x13\xe9\x26\x52\x8c\x12\xa7\x0c\x97\x7f\x50\x71\x4c\x70\xaf\xad\x96\x54\x98\xd4\x53\x65\xa5\xa4\x5e\x47\x47\xc1\xa5\xc0\x14\xb3\x8a\x83\xbb\x45\x71\x07\x8d\xeb\xc6\x1f\xcb\x79\xfd\xf1\xec\x93\x79\xdf\x65\x8b\x12\x7e\x9e\x1d\x7c\x33\xf5\xc7\x82\xe7\xbb\x5f\xab\xad\xfd\xdd\x9d\xfa\xf8\xa4\x83\x13\xf6\x1b\x14\xb7\x92\x0a\x6e\x2a\x0e\xf2\xea\xc7\xc3\x24\xc7\x82\x30\x52\x87\x84\x2a\x4c\x2d\x55\xa8\x3c\xf5\x89\xb1\xd4\x08\x27\x34\xb3\xa9\x4b\x86\x8c\x9c\x4b\xce\xf0\x11\x7b\x84\xe4\xce\xc3\x1f\x29\xb9\xab\x3d\x28\x93\x68\xc6\x9c\x56\xfd\xe0\xcd\xde\x8e\x7f\x5b\xce\x7f\x7e\xf8\x7a\x34\x5e\x88\xdd\x7d\xb9\xe9\x8e\x3f\xb4\xb0\xf9\xed\xeb\xc9\x2f\x24\xa7\xc5\x44\xe9\x91\x48\xb4\x49\xf4\x1f\x94\x9c\x35\x09\x93\x98\x44\xaa\x52\xb0\x54\x49\xed\xa8\x45\x03\xd4\x06\x63\xbd\xe7\x08\x10\xfc\x2d\x92\x13\x7b\xe3\x4f\x1f\x1b\x99\xa2\x32\xbb\xb3\x56\x96\x7e\xe6\xe5\xcf\xe6\x73\xba\xb3\x5d\x71\xef\x14\xd6\x33\x6e\xf0\x67\x17\x4f\xe7\xb3\xdf\x20\xb9\x95\x54\x70\x53\x72\x18\x67\x0f\x2b\xab\xde\x84\xc8\x00\x1c\x35\x51\x07\xaa\x2c\xb7\x14\x90\x21\xe5\x2c\xb0\x04\x02\xa8\x20\xe1\xba\xc9\x39\xf7\x38\x97\xeb\xe3\x1f\x6f\x73\x17\xbb\x50\xd6\x58\xe6\x98\xb3\xfd\xa0\x7d\xb3\x89\xfa\x90\x3f\x2f\xc6\xee\xeb\x89\x28\x3f\xc5\x13\x6d\xdf\xef\xec\xd7\x67\xd3\x7f\x56\x56\x3e\x11\x7a\x22\xf5\x48\x70\xc6\xad\xf9\x83\xa2\x73\x26\x32\xe5\x99\xa3\x86\xb9\x94\xaa\x54\x09\x6a\x01\x34\x0d\x2a\x35\x86\xb9\xe8\x15\x37\xb7\x88\xae\x39\xca\xed\x5f\x7f\xa9\xfd\xe9\x8e\xdd\x31\x45\xf6\x36\x7f\xf5\xb6\xdd\xd9\x2e\xed\xbb\x6f\x45\x11\xaa\x72\x4b\x54\x3b\x45\x7d\x76\xa0\xb7\x43\xf8\x0d\xa2\x5b\x49\x08\xd7\xdb\xb9\xeb\xe8\x2f\x94\x77\xd5\x87\x32\xc3\x8c\x82\xd8\xf7\x85\x8a\x2a\xc7\x14\x75\x60\x90\xa6\x51\x19\xad\x9d\x8c\xdc\x8b\x01\xe3\xd0\x10\xf6\x57\xff\xe1\xca\xbb\x68\x96\x1b\xd5\x83\x3b\x38\xc2\xf4\x84\xb9\x89\x54\x23\x61\xb8\x50\x7c\xe5\x2c\x3d\xa0\x55\xb8\x13\x0f\x17\xd6\xdb\x20\x1c\xd5\x4c\x5b\xaa\x8c\x92\xbd\x77\x24\x14\x38\x30\x94\xc1\x28\x1e\x86\x72\xd5\x37\x1b\x03\x9a\x34\x24\xa9\x94\xb7\xa3\x51\x52\xaa\xfb\xa0\xb9\x6f\x19\xba\x13\x0d\xd8\x04\x98\xec\xb3\xe3\xac\xa2\x2a\x01\x4e\x6d\x0c\x8a\x4a\xcd\x12\x0f\xe8\x38\xe2\x40\xf5\x50\xc8\xce\x93\x93\x7a\x6f\xef\x48\x8e\x4e\xf4\xbd\xe0\xdc\xd7\xe2\xee\x84\x93\x08\x2b\x15\x08\x4f\x21\x5a\x43\x55\x34\x91\x7a\xe5\x2c\x45\x66\x81\x3b\xf4\xa8\xd5\x20\xb1\xde\x24\xcf\x93\xa3\x14\x4a\xff\xfb\xd0\x3c\xea\xec\xcc\xea\xb2\xab\x9a\x6b\x8e\x01\x22\xa2\x4f\x18\x95\x89\x47\xaa\x98\x30\xd4\x6a\x99\x52\x9f\xc6\x68\xbc\x54\x89\xf7\x03\x8a\xcf\x97\x47\x67\xab\xac\xc9\x95\x8d\x92\x90\x77\x4d\x8b\x75\xb3\xfe\x37\x33\xb8\x69\x10\xeb\xd3\xae\x2e\x2b\x1c\x6f\x62\x9d\x67\x45\x3f\x0d\x27\xf3\xac\xe8\x5a\xec\x03\xdd\xf0\xb7\x41\xd6\x0d\xbb\x76\xf7\x16\xba\x1c\x33\xe2\x3e\x74\xad\x64\x0e\xb7\x24\xff\xef\x6c\xc9\x14\x39\x53\x8e\xd1\x18\x13\x49\x95\x57\x8e\xfa\x44\x00\x15\x16\x02\x77\x10\xd2\x10\x43\xbf\xe6\xe6\xf2\x60\x7e\xac\xcb\x79\xd9\x62\x5c\x36\x69\xcb\xba\xd5\x6c\x90\x5e\x58\xd0\x86\x1f\xc4\x77\xb3\x86\x34\x15\x86\x2c\xcd\x42\x7f\xfb\xb4\xec\x6a\x12\xca\x22\xcd\x66\x5d\x3d\x7c\x21\xff\xb7\x98\x4d\xa4\x50\xf7\x12\xe2\x4a\x36\xb5\x22\xb3\xda\x5b\xce\x8c\x65\x14\xa5\x01\xaa\x6c\xe2\xa8\x77\x16\xa8\x4a\x9d\x75\x68\x99\xb7\x6e\xb0\xbc\x97\x17\x26\xb1\x57\x43\x38\x6c\x48\xe8\xea\x1a\x8b\x96\x44\x3c\xc6\xbc\xac\xe6\xfd\xf5\x49\x59\x1f\x12\x28\x22\xc9\x9a\x0b\xca\x23\x49\x6b\x3c\xea\xb0\x68\xf3\xd3\x7f\x8d\x4f\xe5\xf8\xbd\x6a\xc8\x4a\x46\xb9\x22\x9f\xab\xba\xd4\x74\xe9\x52\xd3\x45\x85\x75\xd6\xd3\x07\x39\x49\x11\xda\xae\xc6\x66\x20\xb1\xea\x75\x8a\x7f\xe8\x7c\x5b\xca\x14\xe5\x8c\x70\x36\xb4\x48\x6e\x64\x92\x44\x6a\x77\x9f\x16\x69\x83\xac\x06\x76\x49\x1c\xf6\xba\x48\x5f\xac\x61\x11\x5f\xac\x3d\x79\xf2\xe2\x96\x1f\xe1\xa6\x45\xbc\xf9\xe4\x75\x79\x52\xac\xfd\x3f\x00\x00\xff\xff\x8a\x95\x84\xf3\xf8\x13\x00\x00")

func dbMigrations0006_initial_applicationSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0006_initial_applicationSql,
		"db/migrations/0006_initial_application.sql",
	)
}

func dbMigrations0006_initial_applicationSql() (*asset, error) {
	bytes, err := dbMigrations0006_initial_applicationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0006_initial_application.sql", size: 5112, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x2, 0x90, 0x79, 0x21, 0xd1, 0x20, 0xc7, 0x92, 0xd3, 0x18, 0x2c, 0x3e, 0x1e, 0x21, 0xf, 0x10, 0x99, 0x1c, 0x13, 0xc6, 0xdc, 0xf3, 0xe4, 0xd2, 0xe8, 0xfa, 0xa0, 0xb6, 0x32, 0x9b, 0x29}}
	return a, nil
}

var _dbMigrations0007_add_package_archSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xe6\x96\x18\x9f\xf9\x21\x2e\x12\xb9\x86\x91\x5b\x5f\xa1\x67\x61\x2d\xae\x24\xc2\x14\xa9\xf0\xc7\xae\xdf\xbe\xa0\x7e\xd2\x38\x66\xdc\x06\xe8\xa5\x27\x41\xc4\x70\x67\x76\x76\x39\x42\xe0\xbf\x4e\x35\x8e\x02\xe3\x7b\xbf\x58\x08\x01\xcf\x0c\x72\x55\xfb\x7f\x63\x51\x5b\x87\x8e\xc9\x28\xd3\xc0\xd6\x20\x98\xd8\xb1\x53\x15\x8e\xa4\x23\x0f\x47\x66\x00\x2f\x16\xa4\x03\x3b\x04\xda\x6b\x46\x4f\xd5\x81\x1a\x06\x49\x89\xca\xea\xd8\x8d\x20\x28\x13\x60\x6c\x80\x89\x5a\x43\x72\x4d\x51\x07\x3c\xec\x12\x6b\x68\x19\x95\x35\x3e\x38\x4a\x28\xe5\x07\x20\xff\xe8\xb5\xaa\x54\xd0\x67\x18\xea\x58\xe2\xde\xdb\x01\x9a\xfe\x12\xa8\x61\xc3\x49\xbc\x5c\xae\x52\x95\xd6\xf6\x5c\x47\xad\xcf\x08\x6d\x2a\x91\x50\x27\xa5\x35\x4e\xd6\x1d\xc6\x6e\xac\x0f\x38\xb2\xf3\xca\x1a\x9f\x1a\x48\xd5\x7a\xeb\x43\xe3\xd8\xbf\xe8\x6c\x1b\xd2\xd9\xfe\xad\xb8\xe9\xbc\xa4\x3e\xa9\xa3\xa0\xac\x29\x95\x2c\xa7\xaa\xe5\x81\xcf\xbb\x1b\x76\xe4\xca\xbc\xb9\x9d\x8c\x2a\xa3\x51\x2f\x91\x31\x7e\xee\x2f\x79\x56\xb3\xfc\xd5\x60\xea\x72\x77\xe9\x7d\xd5\x92\x31\xac\xff\x75\xef\xe7\x36\xde\x7b\x3f\x9d\xbf\xf7\x3e\xb1\x5d\x1b\x7f\xe9\x45\xae\xc6\x7c\xf5\x0f\x5c\x4f\xb8\x5f\x96\x0b\x81\xd8\xcb\xf4\x6c\x48\x6b\xd8\xe8\xa0\x8c\x0a\x8a\x34\x6a\x4d\xa1\x22\x37\xb3\x78\x04\x0b\xea\x64\xf1\xb8\x98\x2e\xcc\xaa\x3c\x87\x71\x34\xcf\x58\xe3\xd4\xb2\x63\x5c\x72\xe2\x19\x77\xbc\x2d\xbe\x7c\x5d\x53\x21\xe4\x9a\x6a\xf1\xb8\x97\x2c\xb6\xf4\x40\x62\xbb\xd9\x6f\x0a\x7e\x2a\x64\xf5\xb4\xb9\xbb\xd2\x33\x18\x3b\xae\x97\x07\xc9\x23\xbb\xa0\x3c\x4b\xec\xcf\x83\xd4\x0f\xa5\xcd\x9b\xfa\xb7\xa5\xbd\x66\xcc\x37\x7b\x32\xf9\x7d\xbd\x31\xe8\xcc\x90\x3e\x3b\xe7\xdc\xae\xdc\x1a\xf4\x32\x4f\x30\x89\x7c\x7d\x55\xbb\x7c\xee\xdd\x08\x8c\xfc\x4b\xff\x6c\x5e\x7c\x10\x3b\xbf\x09\x8c\x65\x9e\xe6\xba\xa9\x9f\x01\x00\x00\xff\xff\x06\x5f\x43\x9f\x16\x06\x00\x00")

func dbMigrations0007_add_package_archSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0007_add_package_archSql,
		"db/migrations/0007_add_package_arch.sql",
	)
}

func dbMigrations0007_add_package_archSql() (*asset, error) {
	bytes, err := dbMigrations0007_add_package_archSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0007_add_package_arch.sql", size: 1558, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0xef, 0x79, 0x99, 0x6f, 0x2d, 0xcf, 0x93, 0xf4, 0x9f, 0x84, 0x9b, 0xee, 0x51, 0x70, 0x17, 0x6, 0xbd, 0x50, 0x42, 0x57, 0xbc, 0x4e, 0xc0, 0x44, 0xdb, 0x61, 0x9e, 0xb0, 0xe1, 0xe1, 0x3d}}
	return a, nil
}

var _dbMigrations0008ArmChannelsGroupsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x97\xdd\x6e\xdb\x3a\x12\xc7\xef\xfd\x14\x03\x6c\x00\xb7\x68\xa6\x4b\x52\x14\x45\x26\xe8\x45\x8a\x64\x7b\xb3\xdd\x2e\xfa\xf1\x00\x43\x72\xe8\x08\x95\x25\x55\x1f\x6d\x73\xb7\x4f\xb3\x0f\x76\x9e\xe4\x80\x8e\x93\x26\x81\xd3\xe3\x9c\x34\xf5\x8d\x25\x91\x9a\xf9\xeb\xa7\xe1\x7f\x28\x44\x78\xb1\xae\x57\x03\x4d\x0c\x9f\xfa\xc5\x02\x11\xba\xb6\xb9\x00\x8a\x11\x22\x4d\x04\x75\x02\x6a\x81\xfa\xbe\xa9\x03\x4d\x75\xd7\x42\xec\x78\x84\xb6\x9b\x80\xbf\xd7\xe3\x04\x17\x3c\xbd\xdc\xdc\x77\x1d\xe7\xc3\x44\x13\xaf\xb9\x9d\x5e\xf3\xaa\x6e\x17\x8b\xd3\x77\xf0\xef\x93\xff\xbc\xf9\x74\xf2\xe6\x0c\xfa\xa6\x5f\x8d\x5f\x1a\x38\x38\x58\xf8\xcd\x28\x22\x7c\x7c\x77\xfa\xee\x08\x46\xe6\x58\xb7\x2b\x98\xce\x79\x93\xd9\xd3\xc8\x30\x9e\x77\x73\x13\x37\xd9\x3c\x03\x41\x4f\xc3\x04\x5d\x82\xcb\x54\x75\xd7\xfe\xf1\xbf\xff\x6f\x92\x03\x64\xa5\xd7\xaa\x46\x78\x36\x72\xc3\x61\x82\x3a\x42\x1a\xba\xf5\xad\x27\x68\xea\x75\x3d\x81\x7c\x9e\x73\xb5\x8b\x05\x6c\x7f\x88\x50\xb7\x23\x0f\x13\xf0\xba\x9f\x2e\xe0\xe4\xfd\x5b\x08\xe7\xd4\xb6\xdc\x8c\xd7\x93\xb6\x33\xea\x76\xea\xae\x06\xe1\x2b\x35\x33\x8f\xf0\x6c\x59\xc6\xc4\x95\x97\x0a\x83\xd3\x84\xba\x12\x11\x49\x79\x83\x8a\x89\x2b\x1b\xca\xe0\x52\xb9\x3c\x84\xe5\x38\x91\x6f\x38\x1f\xfd\x43\xea\xd2\x46\x93\x0f\x95\x90\x25\x0a\x87\xd2\x81\x28\x8f\x84\x3b\x2a\xf4\x4b\x65\xa4\xd2\x32\x8f\xb2\x33\xca\x4a\x32\x18\x25\x25\xd4\x3e\x32\x3a\x12\x84\xae\xf2\x95\xe1\xd2\xc4\x50\x56\xcb\x43\x68\xe7\xa6\x39\x04\xf5\xfc\x78\x3f\xc1\x21\x29\x61\x9c\xf5\x28\x93\x74\xa8\x8b\x68\xd0\x9b\x94\x93\x94\xa1\x72\x26\x78\x25\x73\xd4\xa5\xe7\x89\x36\x72\x53\x60\x5d\x14\xf7\xcb\xd5\x45\xa1\x9f\x4e\x6e\xe4\x24\x55\x60\x81\x85\x27\x8d\xda\x68\x87\x5e\x39\x81\xd6\xea\x22\x15\x5e\x97\x25\xfb\x9c\x9d\x9a\xfe\xfc\x52\xaf\x4c\xa4\xbc\xbf\x5f\x6f\x59\x95\x4f\xa8\xb7\x10\xde\xa4\x44\x06\xd9\xc4\x80\x9a\x84\x44\xcf\x64\xd0\x05\xae\x92\xa4\xd2\xfb\x2d\xad\xb8\xba\xac\x86\xa4\xc9\x17\x4f\x21\x77\x47\x91\xe7\xf2\x5e\x0d\xdd\xdc\xef\x2e\xee\xcb\xa1\x1f\xcf\x22\x25\x95\xb6\x4c\x06\x9d\x96\x16\x75\x4c\x19\xbb\x29\xb0\xb2\x5e\xa5\x58\x28\x2d\x92\xcd\xd2\x3e\x6c\x6a\x1b\x9e\x9d\xbc\x7f\xfb\x3c\x9f\xff\xab\x1b\xa0\x1f\xba\x38\x87\xcd\xda\x0b\xcd\x3c\x4e\x3c\x8c\xd7\x13\x12\x35\x23\x1f\xc2\x34\xcc\x7c\x7d\xb2\xfd\x5b\x9e\xcd\x43\xd7\xf3\x3f\x5f\xf3\xd0\xd4\x6d\x0e\x26\x61\x5d\xb7\xf3\xc4\xe3\xf2\x10\xdc\xe6\x77\x08\x4b\x23\x6e\x5c\xbd\x07\x9c\x13\x46\x3d\x00\xdc\x7e\x2b\xf9\x9e\x32\xb8\x4b\x2e\x4a\xa9\x38\xe4\x77\x4f\x85\x46\x4d\x8e\xd1\x45\xed\xd1\x59\xa9\xc9\xd8\x32\x29\xb3\x31\x80\xd7\x3c\xd1\x0f\x6e\xff\x1d\xba\x75\x37\x71\x84\x4d\x31\xc3\xc0\x0d\xd3\xc8\xe3\x21\xe4\x42\xa3\x29\x9c\x83\x9f\x57\x23\x8c\x3d\x87\x3a\xd5\x21\x5f\xbe\xe8\xe6\x01\x42\xd7\xa6\x7a\x35\x5f\xda\xe3\xef\xa5\x5c\x15\x4a\x3f\xa4\x3c\xf7\xb3\x9f\x3d\x29\xb3\xd1\xb2\x12\x36\x62\xf2\xda\xa2\x56\x46\xa0\xf5\x31\xa1\x27\x25\x2a\x4d\x52\xea\x6a\x63\x09\x27\x1b\x9c\xd7\x98\x3f\x0e\x14\x3e\x8f\x10\xe6\x61\xe0\x76\x82\xc8\x5f\xb9\xe9\xfa\xdc\xbd\xe0\x5b\x37\x7c\x06\x6a\x23\xd4\xe3\x15\xfe\xdc\x4c\xf8\xcb\xcc\xed\xd4\x5c\xfc\x66\xb6\xda\xc9\x87\x34\x82\xfd\xbc\x72\x4f\xb6\x5e\x7b\x95\x48\x29\x0c\x92\x09\xb5\xb3\x01\xc9\x52\xc0\x20\x63\x10\x5e\xc6\x2a\x5c\xb6\x89\xb3\xb8\xba\xb1\xf2\xcf\xbe\xf7\x3c\xd4\x19\x25\x35\x90\x98\xa6\x79\xe0\x71\x03\xb4\xcf\xf5\xcb\x4f\xea\x01\x16\x85\x46\x29\x40\x8a\x23\x55\x1e\x15\xee\xa5\xa9\xaa\xa2\x74\x2f\x84\x78\x08\xc4\xbd\x0c\xfc\x8e\xbd\xce\x7d\xcc\xbb\xa0\xc8\x63\x18\xea\x3e\xaf\xc2\x31\x6f\x59\xf2\xbe\xe6\xe4\xed\xa9\xd1\x77\x4d\x77\x3b\x7f\xcb\x7c\xe4\xe9\xe6\xad\xf0\xea\x67\x0e\x9a\xc3\x65\x7e\x2d\xad\x39\xcf\xbc\xf6\xde\xcb\x01\xf8\x76\xce\x03\xe7\x2d\xd0\x2b\x58\x3a\x52\x91\x7d\x25\xb0\xa8\x3c\xa3\x16\xca\xa0\x2d\x8b\x84\x3e\xc5\x68\x7c\xa1\x2b\xef\x79\xb9\x79\x3b\xfb\xa5\x5f\x1e\xff\xe4\x09\x7e\xad\xa0\xdb\xd1\x7e\x9a\xf8\x8e\xf6\x5f\x65\xa2\x3b\xe4\x17\x89\xa5\xd0\x4e\x60\x8c\x55\x81\xda\xe7\xf5\x55\x29\x42\x65\x29\x48\x47\x21\x85\x18\x76\xf2\xfc\x25\x9a\xf6\xa2\xbf\x6d\x28\x8f\x12\x7f\x33\xd6\x43\xc8\x3f\xca\x57\x77\x28\x2e\xbd\x95\xc2\x58\x81\x5c\x18\x42\x6d\x2b\x87\xde\x59\x42\x9d\x9c\x75\x6c\x85\xb7\xce\xed\xc4\xfd\xf7\x85\xec\xc5\xf8\xaa\x9d\x3c\x4a\xf2\xad\x60\x0f\xa1\xbc\x8f\xc5\xee\x50\x56\x29\x5b\x68\x52\x1e\x29\x5a\x83\x3a\x9a\x88\x5e\x3b\x8b\x2c\x2c\x49\xc7\x9e\x4b\xbd\xdb\x0b\xfe\x32\xdf\x5e\xcc\xb6\x6d\xe2\x51\xc2\x6e\xc6\x5a\x1e\x5f\x7d\x03\x72\x7e\x99\xe9\x78\xb1\xe0\x36\x1e\x2f\x16\x07\x07\xc7\xf7\x7c\x9a\x9e\xb5\xf1\xf6\xc8\x69\xf7\xad\x5d\xfc\x19\x00\x00\xff\xff\xe3\x7d\x33\x54\x0e\x0f\x00\x00")

func dbMigrations0008ArmChannelsGroupsSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0008ArmChannelsGroupsSql,
		"db/migrations/0008-arm-channels-groups.sql",
	)
}

func dbMigrations0008ArmChannelsGroupsSql() (*asset, error) {
	bytes, err := dbMigrations0008ArmChannelsGroupsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0008-arm-channels-groups.sql", size: 3854, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0x22, 0xdc, 0x12, 0x14, 0x75, 0xd0, 0x10, 0x21, 0xcc, 0xc6, 0xd4, 0xda, 0xfe, 0x6b, 0x6a, 0xb6, 0xf8, 0xaa, 0x91, 0xfd, 0x7d, 0x62, 0x95, 0x2b, 0xdf, 0xae, 0x43, 0x1a, 0xb1, 0x93, 0x2e}}
	return a, nil
}

var _dbMigrations0009_group_track_namesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x41\x6e\xe3\x3c\x0c\x85\xf7\x3e\x85\x76\x6e\xf1\x83\x80\x24\xd3\x32\x85\xfe\x33\xab\x6e\xe6\x00\x3d\x00\x29\x52\x49\x50\xc7\x36\x1c\xa7\xb9\xfe\x20\x93\x62\x80\x16\x45\x80\xce\x96\xe2\x7b\xc4\xfb\xa0\x07\xe0\xfe\x3b\x1e\x76\x2b\x6f\xe6\x5e\x96\xa6\xe1\x71\xb3\xd5\x6d\x2c\xa3\xb9\xdd\x3a\x9f\x97\x93\x63\x55\x57\xe6\xf1\x7c\x9c\xdc\xb6\x72\x79\x75\x6f\xbc\x96\x3d\xaf\x0f\xb1\x4f\x8f\x6e\x9a\x37\x37\x9d\xc7\xd1\xa9\x55\x3e\x8f\x9b\x6b\x8f\x87\xd3\xe9\x30\xed\x5a\x57\xf6\x56\x5e\xdd\xc3\x4d\xf4\xff\x4f\xd7\xb6\x8f\x4f\x4d\x03\xe0\x96\x79\x39\x8f\xd7\x8b\xb7\xa7\xba\xce\x47\xf7\xf2\xf2\xeb\xb9\x39\x2f\x7a\x1d\xbf\x1f\x3e\xd9\xf6\xbe\xf1\xc3\x1d\xf4\x26\x9d\xdf\x6c\xbd\xac\x87\xcd\xdc\xeb\x34\x5f\x26\xc7\x47\x4d\x78\xdb\x3a\xdd\x91\xb7\xa7\x3f\x91\x5a\x77\xd9\xdb\x6a\xee\xa0\xd7\x59\xe6\xa8\x26\x83\x87\x6e\x10\x03\xf4\x31\x01\xf5\x5d\x05\xa9\xaa\x49\x3a\x1c\x44\xac\x7d\xba\xe7\x2a\xb6\xf1\x47\xcf\xae\x5a\xf0\x98\x3d\xa8\x0e\x1d\xa0\x60\x06\x19\x22\x43\x24\x2e\x21\x73\xa9\x45\xcb\x7d\x4f\x1e\x97\xfd\x27\xd3\x5e\x28\xf8\x44\x1e\xac\x4b\x0c\x48\x43\x06\xc9\xc4\x80\x35\x53\x36\xf2\x42\x39\xdf\x37\x35\xdd\x7d\x0a\x3f\x44\xea\x90\xa3\x00\x2b\x25\x40\x4d\x0a\x82\x99\xc0\x3c\x71\xc8\x26\xd6\xe3\x35\xfc\x57\xc8\xd7\xe3\x3f\x23\x0f\x81\x7b\xea\x6b\x82\x8c\x81\x00\xb5\x7a\x20\x4a\x1d\x0c\x24\xb1\x6a\x17\xd1\x57\xfa\x2e\x72\x0d\x21\x5a\xf1\x01\x84\x3b\x04\xe4\x6c\x90\x15\x05\x32\x05\xe4\x44\x7d\x8d\x29\x7d\x1b\xb9\x25\x0c\x83\x27\x85\x2a\x48\x80\x31\x79\x20\xd1\x0a\xc2\xd1\x0f\xc8\x21\xe0\xc0\xdf\x45\x2e\x28\xb1\x72\x8c\x50\x82\x31\x60\xa6\x02\x4c\x5c\xa0\x04\x2d\x5e\x82\x0e\x25\x0c\xed\xed\x9b\xff\xed\xe4\xf3\x7c\x99\xbe\x6c\xa5\xae\xf3\xf2\xa1\x96\x4f\x4d\xf3\x3b\x00\x00\xff\xff\x43\x8d\x41\xeb\xcd\x03\x00\x00")

func dbMigrations0009_group_track_namesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0009_group_track_namesSql,
		"db/migrations/0009_group_track_names.sql",
	)
}

func dbMigrations0009_group_track_namesSql() (*asset, error) {
	bytes, err := dbMigrations0009_group_track_namesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0009_group_track_names.sql", size: 973, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x38, 0xa2, 0x70, 0x8a, 0xcd, 0xee, 0x1a, 0x4d, 0xd4, 0x63, 0x10, 0x2e, 0x6b, 0xa8, 0x94, 0x9f, 0x78, 0xe6, 0x6b, 0xea, 0x6d, 0x31, 0x43, 0x20, 0xba, 0x3a, 0x99, 0x60, 0x72, 0x8f, 0xec}}
	return a, nil
}

var _dbMigrations0010_add_instance_aliasSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\xb1\x0d\xc2\x40\x0c\x05\xd0\xde\x53\xfc\x2e\x20\x94\x06\x09\x9a\xb4\xac\xc0\x00\x9f\x3b\x03\x27\x39\xbe\xc8\x71\x60\x7d\x5a\x28\x58\xe0\x8d\x23\x0e\x73\x7b\x04\x53\x71\x5d\x44\x68\xa9\x81\xe4\xcd\x14\xcd\xd7\xa4\x17\x05\x6b\x45\xe9\xb6\xcd\x0e\x5a\xe3\x8a\x17\xa3\x3c\x19\xbb\xe3\xe9\xbc\x47\xd5\x3b\x37\x4b\x0c\xc3\x24\xf2\xed\x5d\xfa\xdb\xff\x88\x35\xfa\xf2\x43\x4e\xf2\x09\x00\x00\xff\xff\xbe\x58\x50\x30\x8a\x00\x00\x00")

func dbMigrations0010_add_instance_aliasSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0010_add_instance_aliasSql,
		"db/migrations/0010_add_instance_alias.sql",
	)
}

func dbMigrations0010_add_instance_aliasSql() (*asset, error) {
	bytes, err := dbMigrations0010_add_instance_aliasSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0010_add_instance_alias.sql", size: 138, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x64, 0xa5, 0xe1, 0xe2, 0x15, 0x0, 0x34, 0x49, 0x9f, 0xf, 0x63, 0xd8, 0xa1, 0x1, 0x56, 0x66, 0x9c, 0x69, 0xa2, 0xa6, 0x1a, 0xc9, 0x3d, 0x8e, 0xc4, 0x2d, 0xff, 0x9d, 0x1b, 0x12, 0x8}}
	return a, nil
}

var _dbMigrations0011_add_composite_indexesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x6b\xa7\x22\xb2\x27\xe8\x95\x57\xe0\x6c\x59\x89\x37\x2c\x4a\x12\xc5\x5e\x29\x6f\x8f\x0a\x74\x6d\xa7\x6d\x12\xeb\x2d\x72\xe2\x4f\x5f\xfe\x7f\xbf\x87\xe7\x0f\x39\x56\x32\x86\xd7\xe2\x5c\xa8\x3c\x1e\x25\x45\x1e\x40\x0e\x90\xb2\x01\x0f\xa2\xa6\x20\x49\x8d\x52\x60\xa4\x52\x3a\x09\x64\x92\x13\x9e\x87\x12\xd7\xf3\x88\x12\x07\xc8\xe9\xea\x1a\x34\x8b\x3d\xbf\xde\x7b\x6a\xef\x5a\x50\x30\xe9\xc5\xbe\x30\x74\xa4\x8a\xbf\x2f\x23\x9a\xa2\x72\xcf\x75\xbc\xe9\xb9\xea\xc8\x3a\xd6\x7c\x2a\x0b\xb1\xc9\x68\x42\x40\xf3\xc3\xf0\x33\xc3\x4f\x0c\xbf\xfb\x83\xec\xfc\x44\xf9\x9f\xe6\xd5\xb0\x2e\x02\x3a\xfb\x75\xa4\x86\xe1\x8d\xc3\x3b\x1e\x72\xbd\x17\x5c\xb3\x46\xcc\x72\x17\x88\x53\x89\x64\xac\x7e\x11\xf3\x28\xbc\x6c\xfb\x25\x7f\x26\xe7\x62\xcd\x65\xfe\xc0\xe3\x4d\xb7\x37\x50\x1b\xeb\xba\x85\xdd\x18\x6f\xeb\xbe\x03\x00\x00\xff\xff\x53\x02\x0e\xe5\xf8\x02\x00\x00")

func dbMigrations0011_add_composite_indexesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0011_add_composite_indexesSql,
		"db/migrations/0011_add_composite_indexes.sql",
	)
}

func dbMigrations0011_add_composite_indexesSql() (*asset, error) {
	bytes, err := dbMigrations0011_add_composite_indexesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0011_add_composite_indexes.sql", size: 760, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x6b, 0x97, 0xac, 0x35, 0x88, 0xf7, 0xc0, 0xb4, 0x16, 0xa6, 0xb5, 0x85, 0x35, 0xaa, 0xdf, 0xa6, 0x4c, 0x50, 0x65, 0xb0, 0x4b, 0xba, 0xc1, 0x74, 0x72, 0x93, 0x53, 0x99, 0xf1, 0x60, 0xbb}}
	return a, nil
}

var _dbMigrations0012_drop_unused_indexesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6e\x02\x31\x0c\x45\xf7\x73\x0a\x2f\x83\x2a\x4e\x30\xdb\x5e\xa1\x6b\xcb\x4a\x5c\xb0\x0a\x4e\x14\x9b\x76\xb8\x7d\x95\x32\x6a\x41\x22\x25\x6c\x22\xe5\xff\xaf\x67\xeb\x7b\xbb\x85\x97\xa3\xec\x2a\x39\xc3\x5b\x99\xa6\x54\x73\x01\xd1\xc4\x0b\xc8\x3b\xf0\x22\xe6\x06\x27\xe3\x6a\xe8\x4c\x47\x94\x84\x92\x96\xb9\x13\x14\x35\x27\x8d\x8c\xe6\xe4\x27\xc3\xbd\x98\xe7\x7a\x46\x2a\xe5\x20\x91\x5c\xb2\x3e\x20\xf0\x27\xab\xe3\xe5\xf5\x73\xe1\xa1\xf8\x38\x3e\xee\x49\x95\x0f\x58\x28\x7e\xd0\xee\x8a\x7e\xdd\xc3\x6b\xfe\xd2\x69\x8a\x95\xdb\xe7\x97\xa0\xd9\xbb\x7d\x40\xd6\x8b\x08\x61\x55\x37\xf3\xbf\x84\xf1\xa2\x1a\xba\x93\x86\x70\x1b\x7f\x30\xb3\x53\x6d\x1b\xf0\x23\x42\xb8\xf1\x86\x68\xf7\xf7\x5d\x71\x4f\x6d\x77\xff\x32\x8d\xb6\x3a\x10\xfe\xac\xcd\xfc\x1d\x00\x00\xff\xff\x1f\xfc\xbc\x08\xb8\x02\x00\x00")

func dbMigrations0012_drop_unused_indexesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0012_drop_unused_indexesSql,
		"db/migrations/0012_drop_unused_indexes.sql",
	)
}

func dbMigrations0012_drop_unused_indexesSql() (*asset, error) {
	bytes, err := dbMigrations0012_drop_unused_indexesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0012_drop_unused_indexes.sql", size: 696, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0x11, 0xfe, 0xc4, 0xb3, 0xce, 0xa1, 0xd2, 0x58, 0x8c, 0x62, 0xfa, 0x7f, 0xe2, 0x5b, 0xd9, 0xdc, 0xb0, 0x2b, 0x1f, 0xf5, 0xa5, 0xb, 0x4, 0x61, 0xf, 0x4, 0x8a, 0xb3, 0x6d, 0xbd, 0xf2}}
	return a, nil
}

var _dbMigrations0013_add_stats_indexesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x4d\x0a\xc2\x30\x10\x85\xf7\x39\x45\x96\x15\xdb\x13\x74\xeb\x15\x5c\x0f\x43\x26\xb6\x83\x35\x13\x32\x53\xac\xb7\x97\x52\xea\x0f\x56\x70\xe1\x2e\x0f\xf2\x7d\x79\x79\x4d\xe3\xf7\x17\xee\x0a\x5a\xf4\xc7\xec\x5c\x28\x71\x3e\x72\xa2\x38\x79\x4e\x6a\x98\x42\x04\xcc\x79\xe0\x80\xc6\x92\xa0\x2b\x32\x66\x60\x82\x01\xd5\x20\xf4\x31\x9c\xe1\x24\x05\xc6\x4c\x68\x51\x61\x81\x80\x69\xf2\x92\x36\x15\xd5\xaa\xa8\xb7\x15\xf5\x03\x62\xda\xb5\xdf\x3a\xa9\xa1\x8d\x0a\x3d\xab\x49\xb9\xad\x71\xb9\x4b\x60\xfa\xd1\xe0\x1d\xa8\x96\x58\x3f\x81\xf9\xa9\xd7\x39\x0e\x72\x4d\xce\x51\x91\xfc\x9f\x39\xda\x6d\xd9\x2f\xff\x68\x9d\x73\xf7\x00\x00\x00\xff\xff\xed\xea\xb4\xcb\xaa\x01\x00\x00")

func dbMigrations0013_add_stats_indexesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0013_add_stats_indexesSql,
		"db/migrations/0013_add_stats_indexes.sql",
	)
}

func dbMigrations0013_add_stats_indexesSql() (*asset, error) {
	bytes, err := dbMigrations0013_add_stats_indexesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0013_add_stats_indexes.sql", size: 426, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0x3d, 0xd6, 0x1b, 0x3a, 0x65, 0xee, 0x1, 0x5a, 0x5a, 0x78, 0xa, 0xcd, 0xb5, 0xfe, 0x75, 0xd4, 0x88, 0xd5, 0x26, 0x78, 0x4, 0x8f, 0x12, 0x25, 0x50, 0xc7, 0x31, 0xc, 0x3c, 0x4f, 0x7b}}
	return a, nil
}

var _dbMigrations0014_add_application_product_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x2c\x5b\x7e\x0a\xfd\xd7\xdd\x7a\x05\xd7\x25\x4e\x46\x0d\xa4\x99\x31\x26\x7a\x7d\x17\x0a\x16\xa1\xe8\xf6\x05\x5e\xde\x37\x0c\xf0\xb7\xf0\xc9\xd0\x0b\xec\x5b\x4a\x28\x5e\x0c\x1c\x0f\x52\x00\x5b\x13\xce\xe8\x5c\x15\x90\x08\x72\x95\x58\x14\x9a\x55\x8a\xec\x33\x13\xdc\xd0\xf2\x19\xad\xfb\x1f\xc7\x1e\xa8\x1c\x31\xc4\x41\x43\x64\xfa\x22\xd2\xab\x1b\xb2\xfa\xfa\x34\x87\xf2\x25\xca\xbc\xf2\x3f\x49\xf7\x26\xfd\x94\xd2\x3a\x79\x57\xef\xba\x1d\x4d\x56\xdb\xcf\xcf\xb6\x93\x5f\x9a\x8f\xf1\x53\x7a\x04\x00\x00\xff\xff\xe1\x72\x9e\xd4\x3c\x01\x00\x00")

func dbMigrations0014_add_application_product_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0014_add_application_product_idSql,
		"db/migrations/0014_add_application_product_id.sql",
	)
}

func dbMigrations0014_add_application_product_idSql() (*asset, error) {
	bytes, err := dbMigrations0014_add_application_product_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0014_add_application_product_id.sql", size: 316, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0x83, 0x6d, 0x86, 0x4e, 0x4e, 0x4b, 0xb2, 0x10, 0x50, 0xd2, 0xe5, 0xd2, 0x3e, 0x5e, 0xfe, 0x67, 0xca, 0x30, 0xb6, 0xf8, 0x82, 0x42, 0x7b, 0x22, 0xb9, 0x92, 0x84, 0x9b, 0x3, 0x7f, 0xf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql":                            dbDrop_all_tablesSql,
	"db/sample_data.sql":                                dbSample_dataSql,
	"db/migrations/0001_initial.sql":                    dbMigrations0001_initialSql,
	"db/migrations/0002_event_data.sql":                 dbMigrations0002_event_dataSql,
	"db/migrations/0003_longer_team_names.sql":          dbMigrations0003_longer_team_namesSql,
	"db/migrations/0004_rename_coreos_action.sql":       dbMigrations0004_rename_coreos_actionSql,
	"db/migrations/0005_default_team_id.sql":            dbMigrations0005_default_team_idSql,
	"db/migrations/0006_initial_application.sql":        dbMigrations0006_initial_applicationSql,
	"db/migrations/0007_add_package_arch.sql":           dbMigrations0007_add_package_archSql,
	"db/migrations/0008-arm-channels-groups.sql":        dbMigrations0008ArmChannelsGroupsSql,
	"db/migrations/0009_group_track_names.sql":          dbMigrations0009_group_track_namesSql,
	"db/migrations/0010_add_instance_alias.sql":         dbMigrations0010_add_instance_aliasSql,
	"db/migrations/0011_add_composite_indexes.sql":      dbMigrations0011_add_composite_indexesSql,
	"db/migrations/0012_drop_unused_indexes.sql":        dbMigrations0012_drop_unused_indexesSql,
	"db/migrations/0013_add_stats_indexes.sql":          dbMigrations0013_add_stats_indexesSql,
	"db/migrations/0014_add_application_product_id.sql": dbMigrations0014_add_application_product_idSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": {nil, map[string]*bintree{
		"drop_all_tables.sql": {dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": {nil, map[string]*bintree{
			"0001_initial.sql": {dbMigrations0001_initialSql, map[string]*bintree{}},
			"0002_event_data.sql": {dbMigrations0002_event_dataSql, map[string]*bintree{}},
			"0003_longer_team_names.sql": {dbMigrations0003_longer_team_namesSql, map[string]*bintree{}},
			"0004_rename_coreos_action.sql": {dbMigrations0004_rename_coreos_actionSql, map[string]*bintree{}},
			"0005_default_team_id.sql": {dbMigrations0005_default_team_idSql, map[string]*bintree{}},
			"0006_initial_application.sql": {dbMigrations0006_initial_applicationSql, map[string]*bintree{}},
			"0007_add_package_arch.sql": {dbMigrations0007_add_package_archSql, map[string]*bintree{}},
			"0008-arm-channels-groups.sql": {dbMigrations0008ArmChannelsGroupsSql, map[string]*bintree{}},
			"0009_group_track_names.sql": {dbMigrations0009_group_track_namesSql, map[string]*bintree{}},
			"0010_add_instance_alias.sql": {dbMigrations0010_add_instance_aliasSql, map[string]*bintree{}},
			"0011_add_composite_indexes.sql": {dbMigrations0011_add_composite_indexesSql, map[string]*bintree{}},
			"0012_drop_unused_indexes.sql": {dbMigrations0012_drop_unused_indexesSql, map[string]*bintree{}},
			"0013_add_stats_indexes.sql": {dbMigrations0013_add_stats_indexesSql, map[string]*bintree{}},
			"0014_add_application_product_id.sql": {dbMigrations0014_add_application_product_idSql, map[string]*bintree{}},
		}},
		"sample_data.sql": {dbSample_dataSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
